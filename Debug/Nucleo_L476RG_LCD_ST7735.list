
Nucleo_L476RG_LCD_ST7735.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d88  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003f10  08003f10  00013f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f58  08003f58  0002252c  2**0
                  CONTENTS
  4 .ARM          00000008  08003f58  08003f58  00013f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f60  08003f60  0002252c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f60  08003f60  00013f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f64  08003f64  00013f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000252c  20000000  08003f68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000252c  08006494  0002252c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002634  08006494  00022634  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002252c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df40  00000000  00000000  0002255c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f5b  00000000  00000000  0003049c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc0  00000000  00000000  000323f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae8  00000000  00000000  00032fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002546  00000000  00000000  00033aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed8c  00000000  00000000  00035fe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec859  00000000  00000000  00044d72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001315cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f3c  00000000  00000000  0013161c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000252c 	.word	0x2000252c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003ef8 	.word	0x08003ef8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20002530 	.word	0x20002530
 80001c4:	08003ef8 	.word	0x08003ef8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	; 0x28
 80004d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 0314 	add.w	r3, r7, #20
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e2:	4b3f      	ldr	r3, [pc, #252]	; (80005e0 <MX_GPIO_Init+0x114>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e6:	4a3e      	ldr	r2, [pc, #248]	; (80005e0 <MX_GPIO_Init+0x114>)
 80004e8:	f043 0304 	orr.w	r3, r3, #4
 80004ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ee:	4b3c      	ldr	r3, [pc, #240]	; (80005e0 <MX_GPIO_Init+0x114>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	f003 0304 	and.w	r3, r3, #4
 80004f6:	613b      	str	r3, [r7, #16]
 80004f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004fa:	4b39      	ldr	r3, [pc, #228]	; (80005e0 <MX_GPIO_Init+0x114>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	4a38      	ldr	r2, [pc, #224]	; (80005e0 <MX_GPIO_Init+0x114>)
 8000500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000506:	4b36      	ldr	r3, [pc, #216]	; (80005e0 <MX_GPIO_Init+0x114>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000512:	4b33      	ldr	r3, [pc, #204]	; (80005e0 <MX_GPIO_Init+0x114>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	4a32      	ldr	r2, [pc, #200]	; (80005e0 <MX_GPIO_Init+0x114>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800051e:	4b30      	ldr	r3, [pc, #192]	; (80005e0 <MX_GPIO_Init+0x114>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052a:	4b2d      	ldr	r3, [pc, #180]	; (80005e0 <MX_GPIO_Init+0x114>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	4a2c      	ldr	r2, [pc, #176]	; (80005e0 <MX_GPIO_Init+0x114>)
 8000530:	f043 0302 	orr.w	r3, r3, #2
 8000534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000536:	4b2a      	ldr	r3, [pc, #168]	; (80005e0 <MX_GPIO_Init+0x114>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053a:	f003 0302 	and.w	r3, r3, #2
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000542:	2200      	movs	r2, #0
 8000544:	2180      	movs	r1, #128	; 0x80
 8000546:	4827      	ldr	r0, [pc, #156]	; (80005e4 <MX_GPIO_Init+0x118>)
 8000548:	f001 f946 	bl	80017d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000552:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000556:	f001 f93f 	bl	80017d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	2140      	movs	r1, #64	; 0x40
 800055e:	4822      	ldr	r0, [pc, #136]	; (80005e8 <MX_GPIO_Init+0x11c>)
 8000560:	f001 f93a 	bl	80017d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000564:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800056a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800056e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000570:	2300      	movs	r3, #0
 8000572:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000574:	f107 0314 	add.w	r3, r7, #20
 8000578:	4619      	mov	r1, r3
 800057a:	481a      	ldr	r0, [pc, #104]	; (80005e4 <MX_GPIO_Init+0x118>)
 800057c:	f000 ff82 	bl	8001484 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 8000580:	2380      	movs	r3, #128	; 0x80
 8000582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000584:	2301      	movs	r3, #1
 8000586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000588:	2300      	movs	r3, #0
 800058a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058c:	2300      	movs	r3, #0
 800058e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 8000590:	f107 0314 	add.w	r3, r7, #20
 8000594:	4619      	mov	r1, r3
 8000596:	4813      	ldr	r0, [pc, #76]	; (80005e4 <MX_GPIO_Init+0x118>)
 8000598:	f000 ff74 	bl	8001484 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 800059c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a2:	2301      	movs	r3, #1
 80005a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005aa:	2300      	movs	r3, #0
 80005ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	4619      	mov	r1, r3
 80005b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b8:	f000 ff64 	bl	8001484 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 80005bc:	2340      	movs	r3, #64	; 0x40
 80005be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c0:	2301      	movs	r3, #1
 80005c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c8:	2300      	movs	r3, #0
 80005ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	4619      	mov	r1, r3
 80005d2:	4805      	ldr	r0, [pc, #20]	; (80005e8 <MX_GPIO_Init+0x11c>)
 80005d4:	f000 ff56 	bl	8001484 <HAL_GPIO_Init>

}
 80005d8:	bf00      	nop
 80005da:	3728      	adds	r7, #40	; 0x28
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40021000 	.word	0x40021000
 80005e4:	48000800 	.word	0x48000800
 80005e8:	48000400 	.word	0x48000400

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 fdc1 	bl	8001178 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f825 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f7ff ff67 	bl	80004cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fe:	f000 fd05 	bl	800100c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000602:	f000 f875 	bl	80006f0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	ST7735_Init();
 8000606:	f000 f92b 	bl	8000860 <ST7735_Init>
	ST7735_FillScreen(ST7735_WHITE);
 800060a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800060e:	f000 fb6f 	bl	8000cf0 <ST7735_FillScreen>


//	ST7735_DrawImage(1, 2, 130, 130, &gImage_frame15_130x130);
//	HAL_Delay(2000);
	ST7735_draw_color_image(0, 0, &spanda_logo);
 8000612:	4a0a      	ldr	r2, [pc, #40]	; (800063c <main+0x50>)
 8000614:	2100      	movs	r1, #0
 8000616:	2000      	movs	r0, #0
 8000618:	f000 fc2c 	bl	8000e74 <ST7735_draw_color_image>
//	ST7735_FillRectangle(10, 10, 20, 30, ST7735_YELLOW);
	HAL_Delay(2000);
 800061c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000620:	f000 fe26 	bl	8001270 <HAL_Delay>
	ST7735_draw_monochrome_vector_image_bckg(0, 0, &lung_image_64, ST7735_DARKGREEN_lungs, ST7735_WHITE);
 8000624:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	f240 7302 	movw	r3, #1794	; 0x702
 800062e:	4a04      	ldr	r2, [pc, #16]	; (8000640 <main+0x54>)
 8000630:	2100      	movs	r1, #0
 8000632:	2000      	movs	r0, #0
 8000634:	f000 fba8 	bl	8000d88 <ST7735_draw_monochrome_vector_image_bckg>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000638:	e7fe      	b.n	8000638 <main+0x4c>
 800063a:	bf00      	nop
 800063c:	20002510 	.word	0x20002510
 8000640:	20002518 	.word	0x20002518

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b096      	sub	sp, #88	; 0x58
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	2244      	movs	r2, #68	; 0x44
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f003 fc48 	bl	8003ee8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	463b      	mov	r3, r7
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
 8000664:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000666:	f44f 7000 	mov.w	r0, #512	; 0x200
 800066a:	f001 f8db 	bl	8001824 <HAL_PWREx_ControlVoltageScaling>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000674:	f000 f837 	bl	80006e6 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000680:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000682:	2310      	movs	r3, #16
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000686:	2302      	movs	r3, #2
 8000688:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800068a:	2302      	movs	r3, #2
 800068c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800068e:	2301      	movs	r3, #1
 8000690:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000692:	230a      	movs	r3, #10
 8000694:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000696:	2307      	movs	r3, #7
 8000698:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800069a:	2302      	movs	r3, #2
 800069c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800069e:	2302      	movs	r3, #2
 80006a0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	4618      	mov	r0, r3
 80006a8:	f001 f912 	bl	80018d0 <HAL_RCC_OscConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006b2:	f000 f818 	bl	80006e6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b6:	230f      	movs	r3, #15
 80006b8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ba:	2303      	movs	r3, #3
 80006bc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006ca:	463b      	mov	r3, r7
 80006cc:	2104      	movs	r1, #4
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 fcda 	bl	8002088 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006da:	f000 f804 	bl	80006e6 <Error_Handler>
  }
}
 80006de:	bf00      	nop
 80006e0:	3758      	adds	r7, #88	; 0x58
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ea:	b672      	cpsid	i
}
 80006ec:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ee:	e7fe      	b.n	80006ee <Error_Handler+0x8>

080006f0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80006f4:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <MX_SPI1_Init+0x74>)
 80006f6:	4a1c      	ldr	r2, [pc, #112]	; (8000768 <MX_SPI1_Init+0x78>)
 80006f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006fa:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <MX_SPI1_Init+0x74>)
 80006fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000700:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000702:	4b18      	ldr	r3, [pc, #96]	; (8000764 <MX_SPI1_Init+0x74>)
 8000704:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000708:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800070a:	4b16      	ldr	r3, [pc, #88]	; (8000764 <MX_SPI1_Init+0x74>)
 800070c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000710:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_SPI1_Init+0x74>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <MX_SPI1_Init+0x74>)
 800071a:	2200      	movs	r2, #0
 800071c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_SPI1_Init+0x74>)
 8000720:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000724:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_SPI1_Init+0x74>)
 8000728:	2218      	movs	r2, #24
 800072a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800072c:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <MX_SPI1_Init+0x74>)
 800072e:	2200      	movs	r2, #0
 8000730:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_SPI1_Init+0x74>)
 8000734:	2200      	movs	r2, #0
 8000736:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000738:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <MX_SPI1_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_SPI1_Init+0x74>)
 8000740:	2207      	movs	r2, #7
 8000742:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000744:	4b07      	ldr	r3, [pc, #28]	; (8000764 <MX_SPI1_Init+0x74>)
 8000746:	2200      	movs	r2, #0
 8000748:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_SPI1_Init+0x74>)
 800074c:	2208      	movs	r2, #8
 800074e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000750:	4804      	ldr	r0, [pc, #16]	; (8000764 <MX_SPI1_Init+0x74>)
 8000752:	f002 fb79 	bl	8002e48 <HAL_SPI_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 800075c:	f7ff ffc3 	bl	80006e6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20002548 	.word	0x20002548
 8000768:	40013000 	.word	0x40013000

0800076c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08a      	sub	sp, #40	; 0x28
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a17      	ldr	r2, [pc, #92]	; (80007e8 <HAL_SPI_MspInit+0x7c>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d128      	bne.n	80007e0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800078e:	4b17      	ldr	r3, [pc, #92]	; (80007ec <HAL_SPI_MspInit+0x80>)
 8000790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000792:	4a16      	ldr	r2, [pc, #88]	; (80007ec <HAL_SPI_MspInit+0x80>)
 8000794:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000798:	6613      	str	r3, [r2, #96]	; 0x60
 800079a:	4b14      	ldr	r3, [pc, #80]	; (80007ec <HAL_SPI_MspInit+0x80>)
 800079c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800079e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <HAL_SPI_MspInit+0x80>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	4a10      	ldr	r2, [pc, #64]	; (80007ec <HAL_SPI_MspInit+0x80>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <HAL_SPI_MspInit+0x80>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80007be:	23a0      	movs	r3, #160	; 0xa0
 80007c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c2:	2302      	movs	r3, #2
 80007c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ca:	2303      	movs	r3, #3
 80007cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007ce:	2305      	movs	r3, #5
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	4619      	mov	r1, r3
 80007d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007dc:	f000 fe52 	bl	8001484 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80007e0:	bf00      	nop
 80007e2:	3728      	adds	r7, #40	; 0x28
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40013000 	.word	0x40013000
 80007ec:	40021000 	.word	0x40021000

080007f0 <ST7735_SetAddressWindow>:
#define DELAY 0x80
int32_t Ymax, Ymin, X;        // X goes from 0 to 127
int32_t Yrange; //YrangeDiv2;
int TimeIndex;
uint16_t PlotBGColor;
void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4604      	mov	r4, r0
 80007f8:	4608      	mov	r0, r1
 80007fa:	4611      	mov	r1, r2
 80007fc:	461a      	mov	r2, r3
 80007fe:	4623      	mov	r3, r4
 8000800:	71fb      	strb	r3, [r7, #7]
 8000802:	4603      	mov	r3, r0
 8000804:	71bb      	strb	r3, [r7, #6]
 8000806:	460b      	mov	r3, r1
 8000808:	717b      	strb	r3, [r7, #5]
 800080a:	4613      	mov	r3, r2
 800080c:	713b      	strb	r3, [r7, #4]
	// print_uart("y_start: %d\n\n", y0);

	// print_uart("X_end: %d\n", x1);
	// print_uart("y_end: %d\n\n", y1);

	lcd7735_sendCmd(ST7735_CASET);        // Column addr set
 800080e:	202a      	movs	r0, #42	; 0x2a
 8000810:	f000 fa80 	bl	8000d14 <lcd7735_sendCmd>
	lcd7735_sendData(0x00);               // XS15 ~ XS8
 8000814:	2000      	movs	r0, #0
 8000816:	f000 fa91 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(x0 + ST7735_XSTART); // XSTART       XS7 ~ XS0
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	4618      	mov	r0, r3
 800081e:	f000 fa8d 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x00);               // XE15 ~ XE8
 8000822:	2000      	movs	r0, #0
 8000824:	f000 fa8a 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(x1 + ST7735_XSTART); // XEND         XE7 ~ XE0
 8000828:	797b      	ldrb	r3, [r7, #5]
 800082a:	4618      	mov	r0, r3
 800082c:	f000 fa86 	bl	8000d3c <lcd7735_sendData>

	lcd7735_sendCmd(ST7735_RASET); // Row addr set
 8000830:	202b      	movs	r0, #43	; 0x2b
 8000832:	f000 fa6f 	bl	8000d14 <lcd7735_sendCmd>
	lcd7735_sendData(0x00);
 8000836:	2000      	movs	r0, #0
 8000838:	f000 fa80 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(y0 + ST7735_YSTART); // YSTART
 800083c:	79bb      	ldrb	r3, [r7, #6]
 800083e:	4618      	mov	r0, r3
 8000840:	f000 fa7c 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8000844:	2000      	movs	r0, #0
 8000846:	f000 fa79 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(y1 + ST7735_YSTART); // YEND
 800084a:	793b      	ldrb	r3, [r7, #4]
 800084c:	4618      	mov	r0, r3
 800084e:	f000 fa75 	bl	8000d3c <lcd7735_sendData>

	lcd7735_sendCmd(ST7735_RAMWR);
 8000852:	202c      	movs	r0, #44	; 0x2c
 8000854:	f000 fa5e 	bl	8000d14 <lcd7735_sendCmd>
}
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	bd90      	pop	{r4, r7, pc}

08000860 <ST7735_Init>:
void ST7735_Init() {
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
	//ST7735_Select();
	LCD_CS0
 8000864:	2200      	movs	r2, #0
 8000866:	2140      	movs	r1, #64	; 0x40
 8000868:	4810      	ldr	r0, [pc, #64]	; (80008ac <ST7735_Init+0x4c>)
 800086a:	f000 ffb5 	bl	80017d8 <HAL_GPIO_WritePin>
	;
	//ST7735_Reset();
	LCD_RST0
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000878:	f000 ffae 	bl	80017d8 <HAL_GPIO_WritePin>
	;
	HAL_Delay(7);
 800087c:	2007      	movs	r0, #7
 800087e:	f000 fcf7 	bl	8001270 <HAL_Delay>
	LCD_RST1
 8000882:	2201      	movs	r2, #1
 8000884:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088c:	f000 ffa4 	bl	80017d8 <HAL_GPIO_WritePin>
	;

	//ST7735_ExecuteCommandList(init_cmds1);
	ST7735_Init_Command1();
 8000890:	f000 f80e 	bl	80008b0 <ST7735_Init_Command1>
	//ST7735_ExecuteCommandList(init_cmds2);
	ST7735_Init_Command2();
 8000894:	f000 f925 	bl	8000ae2 <ST7735_Init_Command2>
	//ST7735_ExecuteCommandList(init_cmds3);
	ST7735_Init_Command3();
 8000898:	f000 f945 	bl	8000b26 <ST7735_Init_Command3>

	//ST7735_Unselect();
	LCD_CS1
 800089c:	2201      	movs	r2, #1
 800089e:	2140      	movs	r1, #64	; 0x40
 80008a0:	4802      	ldr	r0, [pc, #8]	; (80008ac <ST7735_Init+0x4c>)
 80008a2:	f000 ff99 	bl	80017d8 <HAL_GPIO_WritePin>
	;
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	48000400 	.word	0x48000400

080008b0 <ST7735_Init_Command1>:

void ST7735_Init_Command1(void) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	lcd7735_sendCmd(ST7735_SWRESET);		//  1: Software reset
 80008b4:	2001      	movs	r0, #1
 80008b6:	f000 fa2d 	bl	8000d14 <lcd7735_sendCmd>
	HAL_Delay(150);
 80008ba:	2096      	movs	r0, #150	; 0x96
 80008bc:	f000 fcd8 	bl	8001270 <HAL_Delay>
	lcd7735_sendCmd(ST7735_SLPOUT);			//  2: Out of sleep mode
 80008c0:	2011      	movs	r0, #17
 80008c2:	f000 fa27 	bl	8000d14 <lcd7735_sendCmd>
	HAL_Delay(500);
 80008c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008ca:	f000 fcd1 	bl	8001270 <HAL_Delay>
	lcd7735_sendCmd(ST7735_FRMCTR1);		//  3: Frame rate ctrl - normal mode
 80008ce:	20b1      	movs	r0, #177	; 0xb1
 80008d0:	f000 fa20 	bl	8000d14 <lcd7735_sendCmd>
	lcd7735_sendData(0x00);			//     Rate = fosc/(1x2+40) * (LINE+2C+2D)
 80008d4:	2000      	movs	r0, #0
 80008d6:	f000 fa31 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x01);
 80008da:	2001      	movs	r0, #1
 80008dc:	f000 fa2e 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x01);
 80008e0:	2001      	movs	r0, #1
 80008e2:	f000 fa2b 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_FRMCTR2);	//  4: Frame rate control - idle mode
 80008e6:	20b2      	movs	r0, #178	; 0xb2
 80008e8:	f000 fa14 	bl	8000d14 <lcd7735_sendCmd>
	lcd7735_sendData(0x00);				//  Rate = fosc/(1x2+40) * (LINE+2C+2D)
 80008ec:	2000      	movs	r0, #0
 80008ee:	f000 fa25 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x01);
 80008f2:	2001      	movs	r0, #1
 80008f4:	f000 fa22 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x01);
 80008f8:	2001      	movs	r0, #1
 80008fa:	f000 fa1f 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_FRMCTR3);	//  5: Frame rate ctrl - partial mode
 80008fe:	20b3      	movs	r0, #179	; 0xb3
 8000900:	f000 fa08 	bl	8000d14 <lcd7735_sendCmd>
	lcd7735_sendData(0x00);							//     Dot inversion mode
 8000904:	2000      	movs	r0, #0
 8000906:	f000 fa19 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x01);
 800090a:	2001      	movs	r0, #1
 800090c:	f000 fa16 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x01);
 8000910:	2001      	movs	r0, #1
 8000912:	f000 fa13 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x00);							//     Line inversion mode
 8000916:	2000      	movs	r0, #0
 8000918:	f000 fa10 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x01);
 800091c:	2001      	movs	r0, #1
 800091e:	f000 fa0d 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x01);
 8000922:	2001      	movs	r0, #1
 8000924:	f000 fa0a 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_INVCTR);			//  6: Display inversion ctrl
 8000928:	20b4      	movs	r0, #180	; 0xb4
 800092a:	f000 f9f3 	bl	8000d14 <lcd7735_sendCmd>
	lcd7735_sendData(0x07);							//     No inversion
 800092e:	2007      	movs	r0, #7
 8000930:	f000 fa04 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_PWCTR1);			//  7: Power control
 8000934:	20c0      	movs	r0, #192	; 0xc0
 8000936:	f000 f9ed 	bl	8000d14 <lcd7735_sendCmd>
	lcd7735_sendData(0xA2);
 800093a:	20a2      	movs	r0, #162	; 0xa2
 800093c:	f000 f9fe 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x02);							//     -4.6V
 8000940:	2002      	movs	r0, #2
 8000942:	f000 f9fb 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x84);							//     AUTO mode
 8000946:	2084      	movs	r0, #132	; 0x84
 8000948:	f000 f9f8 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_PWCTR2);			//  8: Power control
 800094c:	20c1      	movs	r0, #193	; 0xc1
 800094e:	f000 f9e1 	bl	8000d14 <lcd7735_sendCmd>
	lcd7735_sendData(0xC5);		//     VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD
 8000952:	20c5      	movs	r0, #197	; 0xc5
 8000954:	f000 f9f2 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_PWCTR3);			//  9: Power control
 8000958:	20c2      	movs	r0, #194	; 0xc2
 800095a:	f000 f9db 	bl	8000d14 <lcd7735_sendCmd>
	lcd7735_sendData(0x0A);							//     Opamp current small
 800095e:	200a      	movs	r0, #10
 8000960:	f000 f9ec 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x00);							//     Boost frequency
 8000964:	2000      	movs	r0, #0
 8000966:	f000 f9e9 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_PWCTR4);			// 10: Power control
 800096a:	20c3      	movs	r0, #195	; 0xc3
 800096c:	f000 f9d2 	bl	8000d14 <lcd7735_sendCmd>
	lcd7735_sendData(0x8A);		//     BCLK/2, Opamp current small & Medium low
 8000970:	208a      	movs	r0, #138	; 0x8a
 8000972:	f000 f9e3 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x2A);
 8000976:	202a      	movs	r0, #42	; 0x2a
 8000978:	f000 f9e0 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_PWCTR5);			// 11: Power control
 800097c:	20c4      	movs	r0, #196	; 0xc4
 800097e:	f000 f9c9 	bl	8000d14 <lcd7735_sendCmd>
	lcd7735_sendData(0x8A);
 8000982:	208a      	movs	r0, #138	; 0x8a
 8000984:	f000 f9da 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0xEE);
 8000988:	20ee      	movs	r0, #238	; 0xee
 800098a:	f000 f9d7 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_VMCTR1);			// 12: Power control
 800098e:	20c5      	movs	r0, #197	; 0xc5
 8000990:	f000 f9c0 	bl	8000d14 <lcd7735_sendCmd>
	lcd7735_sendData(0x0E);
 8000994:	200e      	movs	r0, #14
 8000996:	f000 f9d1 	bl	8000d3c <lcd7735_sendData>

//	lcd7735_sendCmd(ST7735_MADCTL);			// 14: Memory access control (directions)

	// ST7735R Gamma Sequence
	lcd7735_sendCmd(0xe0);
 800099a:	20e0      	movs	r0, #224	; 0xe0
 800099c:	f000 f9ba 	bl	8000d14 <lcd7735_sendCmd>
	lcd7735_sendData(0x0f);
 80009a0:	200f      	movs	r0, #15
 80009a2:	f000 f9cb 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x1a);
 80009a6:	201a      	movs	r0, #26
 80009a8:	f000 f9c8 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x0f);
 80009ac:	200f      	movs	r0, #15
 80009ae:	f000 f9c5 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x18);
 80009b2:	2018      	movs	r0, #24
 80009b4:	f000 f9c2 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x2f);
 80009b8:	202f      	movs	r0, #47	; 0x2f
 80009ba:	f000 f9bf 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x28);
 80009be:	2028      	movs	r0, #40	; 0x28
 80009c0:	f000 f9bc 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x20);
 80009c4:	2020      	movs	r0, #32
 80009c6:	f000 f9b9 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x22);
 80009ca:	2022      	movs	r0, #34	; 0x22
 80009cc:	f000 f9b6 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x1f);
 80009d0:	201f      	movs	r0, #31
 80009d2:	f000 f9b3 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x1b);
 80009d6:	201b      	movs	r0, #27
 80009d8:	f000 f9b0 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x23);
 80009dc:	2023      	movs	r0, #35	; 0x23
 80009de:	f000 f9ad 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x37);
 80009e2:	2037      	movs	r0, #55	; 0x37
 80009e4:	f000 f9aa 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x00);
 80009e8:	2000      	movs	r0, #0
 80009ea:	f000 f9a7 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x07);
 80009ee:	2007      	movs	r0, #7
 80009f0:	f000 f9a4 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x02);
 80009f4:	2002      	movs	r0, #2
 80009f6:	f000 f9a1 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x10);
 80009fa:	2010      	movs	r0, #16
 80009fc:	f000 f99e 	bl	8000d3c <lcd7735_sendData>

	lcd7735_sendCmd(0xe1);
 8000a00:	20e1      	movs	r0, #225	; 0xe1
 8000a02:	f000 f987 	bl	8000d14 <lcd7735_sendCmd>
	lcd7735_sendData(0x0f);
 8000a06:	200f      	movs	r0, #15
 8000a08:	f000 f998 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x1b);
 8000a0c:	201b      	movs	r0, #27
 8000a0e:	f000 f995 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x0f);
 8000a12:	200f      	movs	r0, #15
 8000a14:	f000 f992 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x17);
 8000a18:	2017      	movs	r0, #23
 8000a1a:	f000 f98f 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x33);
 8000a1e:	2033      	movs	r0, #51	; 0x33
 8000a20:	f000 f98c 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x2c);
 8000a24:	202c      	movs	r0, #44	; 0x2c
 8000a26:	f000 f989 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x29);
 8000a2a:	2029      	movs	r0, #41	; 0x29
 8000a2c:	f000 f986 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x2e);
 8000a30:	202e      	movs	r0, #46	; 0x2e
 8000a32:	f000 f983 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x30);
 8000a36:	2030      	movs	r0, #48	; 0x30
 8000a38:	f000 f980 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x30);
 8000a3c:	2030      	movs	r0, #48	; 0x30
 8000a3e:	f000 f97d 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x39);
 8000a42:	2039      	movs	r0, #57	; 0x39
 8000a44:	f000 f97a 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x3f);
 8000a48:	203f      	movs	r0, #63	; 0x3f
 8000a4a:	f000 f977 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f000 f974 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x07);
 8000a54:	2007      	movs	r0, #7
 8000a56:	f000 f971 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x03);
 8000a5a:	2003      	movs	r0, #3
 8000a5c:	f000 f96e 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x10);
 8000a60:	2010      	movs	r0, #16
 8000a62:	f000 f96b 	bl	8000d3c <lcd7735_sendData>

	lcd7735_sendCmd(0x2a);
 8000a66:	202a      	movs	r0, #42	; 0x2a
 8000a68:	f000 f954 	bl	8000d14 <lcd7735_sendCmd>
	lcd7735_sendData(0x00);
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f000 f965 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8000a72:	2000      	movs	r0, #0
 8000a74:	f000 f962 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f000 f95f 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x7f);
 8000a7e:	207f      	movs	r0, #127	; 0x7f
 8000a80:	f000 f95c 	bl	8000d3c <lcd7735_sendData>

	lcd7735_sendCmd(0x2b);
 8000a84:	202b      	movs	r0, #43	; 0x2b
 8000a86:	f000 f945 	bl	8000d14 <lcd7735_sendCmd>
	lcd7735_sendData(0x00);
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f000 f956 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8000a90:	2000      	movs	r0, #0
 8000a92:	f000 f953 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8000a96:	2000      	movs	r0, #0
 8000a98:	f000 f950 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x9f);
 8000a9c:	209f      	movs	r0, #159	; 0x9f
 8000a9e:	f000 f94d 	bl	8000d3c <lcd7735_sendData>

	lcd7735_sendCmd(0xF0); // Enable test command
 8000aa2:	20f0      	movs	r0, #240	; 0xf0
 8000aa4:	f000 f936 	bl	8000d14 <lcd7735_sendCmd>
	lcd7735_sendData(0x01);
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f000 f947 	bl	8000d3c <lcd7735_sendData>

	lcd7735_sendCmd(0xF6); // Disable ram power save mode
 8000aae:	20f6      	movs	r0, #246	; 0xf6
 8000ab0:	f000 f930 	bl	8000d14 <lcd7735_sendCmd>
	lcd7735_sendData(0x00);
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f000 f941 	bl	8000d3c <lcd7735_sendData>

	lcd7735_sendCmd(ST7735_INVOFF);    // 13: Don't invert display
 8000aba:	2020      	movs	r0, #32
 8000abc:	f000 f92a 	bl	8000d14 <lcd7735_sendCmd>
//	  lcd7735_sendCmd(ST7735_INVON); // 13: ON invert display

	lcd7735_sendCmd(ST7735_MADCTL);    // 14: Memory access control (directions)
 8000ac0:	2036      	movs	r0, #54	; 0x36
 8000ac2:	f000 f927 	bl	8000d14 <lcd7735_sendCmd>
	lcd7735_sendData(ST7735_ROTATION); //     row addr/col addr, bottom to top refresh
 8000ac6:	20c8      	movs	r0, #200	; 0xc8
 8000ac8:	f000 f938 	bl	8000d3c <lcd7735_sendData>

	lcd7735_sendCmd(ST7735_COLMOD); // 65k mode ->16-bit color
 8000acc:	203a      	movs	r0, #58	; 0x3a
 8000ace:	f000 f921 	bl	8000d14 <lcd7735_sendCmd>
	lcd7735_sendData(0x05);
 8000ad2:	2005      	movs	r0, #5
 8000ad4:	f000 f932 	bl	8000d3c <lcd7735_sendData>

	lcd7735_sendCmd(0x29); // Display on
 8000ad8:	2029      	movs	r0, #41	; 0x29
 8000ada:	f000 f91b 	bl	8000d14 <lcd7735_sendCmd>
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <ST7735_Init_Command2>:

void ST7735_Init_Command2(void) {
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	af00      	add	r7, sp, #0
	lcd7735_sendCmd(ST7735_CASET);			//  1: Column addr set
 8000ae6:	202a      	movs	r0, #42	; 0x2a
 8000ae8:	f000 f914 	bl	8000d14 <lcd7735_sendCmd>
	lcd7735_sendData(0x00);							//     XSTART = 0
 8000aec:	2000      	movs	r0, #0
 8000aee:	f000 f925 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8000af2:	2000      	movs	r0, #0
 8000af4:	f000 f922 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x00);							//     XEND = 127
 8000af8:	2000      	movs	r0, #0
 8000afa:	f000 f91f 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x7F);
 8000afe:	207f      	movs	r0, #127	; 0x7f
 8000b00:	f000 f91c 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_RASET);			//  2: Row addr set
 8000b04:	202b      	movs	r0, #43	; 0x2b
 8000b06:	f000 f905 	bl	8000d14 <lcd7735_sendCmd>
	lcd7735_sendData(0x00);							//     XSTART = 0
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	f000 f916 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8000b10:	2000      	movs	r0, #0
 8000b12:	f000 f913 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x00);							//     XEND = 127
 8000b16:	2000      	movs	r0, #0
 8000b18:	f000 f910 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x7F);
 8000b1c:	207f      	movs	r0, #127	; 0x7f
 8000b1e:	f000 f90d 	bl	8000d3c <lcd7735_sendData>
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <ST7735_Init_Command3>:

void ST7735_Init_Command3(void) {
 8000b26:	b580      	push	{r7, lr}
 8000b28:	af00      	add	r7, sp, #0
	lcd7735_sendCmd(ST7735_GMCTRP1);  //  1: Magical unicorn dust
 8000b2a:	20e0      	movs	r0, #224	; 0xe0
 8000b2c:	f000 f8f2 	bl	8000d14 <lcd7735_sendCmd>
	lcd7735_sendData(0x02);
 8000b30:	2002      	movs	r0, #2
 8000b32:	f000 f903 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x1C);
 8000b36:	201c      	movs	r0, #28
 8000b38:	f000 f900 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x07);
 8000b3c:	2007      	movs	r0, #7
 8000b3e:	f000 f8fd 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x12);
 8000b42:	2012      	movs	r0, #18
 8000b44:	f000 f8fa 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x37);
 8000b48:	2037      	movs	r0, #55	; 0x37
 8000b4a:	f000 f8f7 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x32);
 8000b4e:	2032      	movs	r0, #50	; 0x32
 8000b50:	f000 f8f4 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x29);
 8000b54:	2029      	movs	r0, #41	; 0x29
 8000b56:	f000 f8f1 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 8000b5a:	202d      	movs	r0, #45	; 0x2d
 8000b5c:	f000 f8ee 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x29);
 8000b60:	2029      	movs	r0, #41	; 0x29
 8000b62:	f000 f8eb 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x25);
 8000b66:	2025      	movs	r0, #37	; 0x25
 8000b68:	f000 f8e8 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x2B);
 8000b6c:	202b      	movs	r0, #43	; 0x2b
 8000b6e:	f000 f8e5 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x39);
 8000b72:	2039      	movs	r0, #57	; 0x39
 8000b74:	f000 f8e2 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8000b78:	2000      	movs	r0, #0
 8000b7a:	f000 f8df 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x01);
 8000b7e:	2001      	movs	r0, #1
 8000b80:	f000 f8dc 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x03);
 8000b84:	2003      	movs	r0, #3
 8000b86:	f000 f8d9 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x10);
 8000b8a:	2010      	movs	r0, #16
 8000b8c:	f000 f8d6 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_GMCTRN1);  //  2: Sparkles and rainbows
 8000b90:	20e1      	movs	r0, #225	; 0xe1
 8000b92:	f000 f8bf 	bl	8000d14 <lcd7735_sendCmd>
	lcd7735_sendData(0x03);
 8000b96:	2003      	movs	r0, #3
 8000b98:	f000 f8d0 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x1D);
 8000b9c:	201d      	movs	r0, #29
 8000b9e:	f000 f8cd 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x07);
 8000ba2:	2007      	movs	r0, #7
 8000ba4:	f000 f8ca 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x06);
 8000ba8:	2006      	movs	r0, #6
 8000baa:	f000 f8c7 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x2E);
 8000bae:	202e      	movs	r0, #46	; 0x2e
 8000bb0:	f000 f8c4 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x2C);
 8000bb4:	202c      	movs	r0, #44	; 0x2c
 8000bb6:	f000 f8c1 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x29);
 8000bba:	2029      	movs	r0, #41	; 0x29
 8000bbc:	f000 f8be 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 8000bc0:	202d      	movs	r0, #45	; 0x2d
 8000bc2:	f000 f8bb 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x2E);
 8000bc6:	202e      	movs	r0, #46	; 0x2e
 8000bc8:	f000 f8b8 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x2E);
 8000bcc:	202e      	movs	r0, #46	; 0x2e
 8000bce:	f000 f8b5 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x37);
 8000bd2:	2037      	movs	r0, #55	; 0x37
 8000bd4:	f000 f8b2 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x3F);
 8000bd8:	203f      	movs	r0, #63	; 0x3f
 8000bda:	f000 f8af 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8000bde:	2000      	movs	r0, #0
 8000be0:	f000 f8ac 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8000be4:	2000      	movs	r0, #0
 8000be6:	f000 f8a9 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x02);
 8000bea:	2002      	movs	r0, #2
 8000bec:	f000 f8a6 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendData(0x10);
 8000bf0:	2010      	movs	r0, #16
 8000bf2:	f000 f8a3 	bl	8000d3c <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_NORON);
 8000bf6:	2013      	movs	r0, #19
 8000bf8:	f000 f88c 	bl	8000d14 <lcd7735_sendCmd>
	HAL_Delay(10);
 8000bfc:	200a      	movs	r0, #10
 8000bfe:	f000 fb37 	bl	8001270 <HAL_Delay>
	lcd7735_sendCmd(ST7735_DISPON);
 8000c02:	2029      	movs	r0, #41	; 0x29
 8000c04:	f000 f886 	bl	8000d14 <lcd7735_sendCmd>
	HAL_Delay(100);
 8000c08:	2064      	movs	r0, #100	; 0x64
 8000c0a:	f000 fb31 	bl	8001270 <HAL_Delay>
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <ST7735_FillRectangle>:
	LCD_CS1
	;
}

void ST7735_FillRectangle(uint8_t x_start, uint8_t y_start, uint8_t width,
		uint8_t height, uint16_t color) {
 8000c14:	b590      	push	{r4, r7, lr}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4604      	mov	r4, r0
 8000c1c:	4608      	mov	r0, r1
 8000c1e:	4611      	mov	r1, r2
 8000c20:	461a      	mov	r2, r3
 8000c22:	4623      	mov	r3, r4
 8000c24:	71fb      	strb	r3, [r7, #7]
 8000c26:	4603      	mov	r3, r0
 8000c28:	71bb      	strb	r3, [r7, #6]
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	717b      	strb	r3, [r7, #5]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	713b      	strb	r3, [r7, #4]
	// clipping
	if ((x_start >= ST7735_WIDTH) || (y_start >= ST7735_HEIGHT))
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	2b81      	cmp	r3, #129	; 0x81
 8000c36:	d854      	bhi.n	8000ce2 <ST7735_FillRectangle+0xce>
 8000c38:	79bb      	ldrb	r3, [r7, #6]
 8000c3a:	2b82      	cmp	r3, #130	; 0x82
 8000c3c:	d851      	bhi.n	8000ce2 <ST7735_FillRectangle+0xce>
		return;
	if ((x_start + width - 1) >= ST7735_WIDTH)
 8000c3e:	79fa      	ldrb	r2, [r7, #7]
 8000c40:	797b      	ldrb	r3, [r7, #5]
 8000c42:	4413      	add	r3, r2
 8000c44:	2b82      	cmp	r3, #130	; 0x82
 8000c46:	dd06      	ble.n	8000c56 <ST7735_FillRectangle+0x42>
		width = ST7735_WIDTH - x_start;
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8000c4e:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8000c52:	3382      	adds	r3, #130	; 0x82
 8000c54:	717b      	strb	r3, [r7, #5]
	if ((y_start + height - 1) >= ST7735_HEIGHT)
 8000c56:	79ba      	ldrb	r2, [r7, #6]
 8000c58:	793b      	ldrb	r3, [r7, #4]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	2b83      	cmp	r3, #131	; 0x83
 8000c5e:	dd06      	ble.n	8000c6e <ST7735_FillRectangle+0x5a>
		height = ST7735_HEIGHT - y_start;
 8000c60:	79bb      	ldrb	r3, [r7, #6]
 8000c62:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8000c66:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8000c6a:	3383      	adds	r3, #131	; 0x83
 8000c6c:	713b      	strb	r3, [r7, #4]

	LCD_CS0
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2140      	movs	r1, #64	; 0x40
 8000c72:	481e      	ldr	r0, [pc, #120]	; (8000cec <ST7735_FillRectangle+0xd8>)
 8000c74:	f000 fdb0 	bl	80017d8 <HAL_GPIO_WritePin>
	;

	ST7735_SetAddressWindow(x_start, y_start, (x_start + width - 1),
 8000c78:	79fa      	ldrb	r2, [r7, #7]
 8000c7a:	797b      	ldrb	r3, [r7, #5]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	3b01      	subs	r3, #1
 8000c82:	b2dc      	uxtb	r4, r3
			(y_start + height - 1));
 8000c84:	79ba      	ldrb	r2, [r7, #6]
 8000c86:	793b      	ldrb	r3, [r7, #4]
 8000c88:	4413      	add	r3, r2
 8000c8a:	b2db      	uxtb	r3, r3
	ST7735_SetAddressWindow(x_start, y_start, (x_start + width - 1),
 8000c8c:	3b01      	subs	r3, #1
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	79b9      	ldrb	r1, [r7, #6]
 8000c92:	79f8      	ldrb	r0, [r7, #7]
 8000c94:	4622      	mov	r2, r4
 8000c96:	f7ff fdab 	bl	80007f0 <ST7735_SetAddressWindow>

	for (y_start = height; y_start > 0; y_start--) {
 8000c9a:	793b      	ldrb	r3, [r7, #4]
 8000c9c:	71bb      	strb	r3, [r7, #6]
 8000c9e:	e017      	b.n	8000cd0 <ST7735_FillRectangle+0xbc>
		for (x_start = width; x_start > 0; x_start--) {
 8000ca0:	797b      	ldrb	r3, [r7, #5]
 8000ca2:	71fb      	strb	r3, [r7, #7]
 8000ca4:	e00e      	b.n	8000cc4 <ST7735_FillRectangle+0xb0>
			lcd7735_sendData(color >> 8);
 8000ca6:	8b3b      	ldrh	r3, [r7, #24]
 8000ca8:	0a1b      	lsrs	r3, r3, #8
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 f844 	bl	8000d3c <lcd7735_sendData>
			lcd7735_sendData(color);
 8000cb4:	8b3b      	ldrh	r3, [r7, #24]
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f000 f83f 	bl	8000d3c <lcd7735_sendData>
		for (x_start = width; x_start > 0; x_start--) {
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	71fb      	strb	r3, [r7, #7]
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d1ed      	bne.n	8000ca6 <ST7735_FillRectangle+0x92>
	for (y_start = height; y_start > 0; y_start--) {
 8000cca:	79bb      	ldrb	r3, [r7, #6]
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	71bb      	strb	r3, [r7, #6]
 8000cd0:	79bb      	ldrb	r3, [r7, #6]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d1e4      	bne.n	8000ca0 <ST7735_FillRectangle+0x8c>
		}
	}

	LCD_CS1
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	2140      	movs	r1, #64	; 0x40
 8000cda:	4804      	ldr	r0, [pc, #16]	; (8000cec <ST7735_FillRectangle+0xd8>)
 8000cdc:	f000 fd7c 	bl	80017d8 <HAL_GPIO_WritePin>
	; // Unselect

	return;
 8000ce0:	e000      	b.n	8000ce4 <ST7735_FillRectangle+0xd0>
		return;
 8000ce2:	bf00      	nop
}
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd90      	pop	{r4, r7, pc}
 8000cea:	bf00      	nop
 8000cec:	48000400 	.word	0x48000400

08000cf0 <ST7735_FillScreen>:
	}

	return;
}

void ST7735_FillScreen(uint16_t color) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af02      	add	r7, sp, #8
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	80fb      	strh	r3, [r7, #6]
	ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	9300      	str	r3, [sp, #0]
 8000cfe:	2383      	movs	r3, #131	; 0x83
 8000d00:	2282      	movs	r2, #130	; 0x82
 8000d02:	2100      	movs	r1, #0
 8000d04:	2000      	movs	r0, #0
 8000d06:	f7ff ff85 	bl	8000c14 <ST7735_FillRectangle>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <lcd7735_sendCmd>:
	lcd7735_sendCmd(invert ? ST7735_INVON : ST7735_INVOFF);
	LCD_CS1
	; // Unselect
}

void lcd7735_sendCmd(uint8_t cmd) {          // uint8_t       //unsigned char
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
	LCD_DC0; // Set DC low
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2180      	movs	r1, #128	; 0x80
 8000d22:	4805      	ldr	r0, [pc, #20]	; (8000d38 <lcd7735_sendCmd+0x24>)
 8000d24:	f000 fd58 	bl	80017d8 <HAL_GPIO_WritePin>

	lcd7735_senddata(cmd);
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 f81a 	bl	8000d64 <lcd7735_senddata>
	// flush_to_spi();
}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	48000800 	.word	0x48000800

08000d3c <lcd7735_sendData>:

void lcd7735_sendData(uint8_t data) {  //uint8_t      //unsigned char
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
	LCD_DC1;  //Set DC HIGH
 8000d46:	2201      	movs	r2, #1
 8000d48:	2180      	movs	r1, #128	; 0x80
 8000d4a:	4805      	ldr	r0, [pc, #20]	; (8000d60 <lcd7735_sendData+0x24>)
 8000d4c:	f000 fd44 	bl	80017d8 <HAL_GPIO_WritePin>
	lcd7735_senddata(data);
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 f806 	bl	8000d64 <lcd7735_senddata>
}
 8000d58:	bf00      	nop
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	48000800 	.word	0x48000800

08000d64 <lcd7735_senddata>:

void lcd7735_senddata(uint8_t data) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &data, sizeof(data), 0x1);
 8000d6e:	1df9      	adds	r1, r7, #7
 8000d70:	2301      	movs	r3, #1
 8000d72:	2201      	movs	r2, #1
 8000d74:	4803      	ldr	r0, [pc, #12]	; (8000d84 <lcd7735_senddata+0x20>)
 8000d76:	f002 f90a 	bl	8002f8e <HAL_SPI_Transmit>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20002548 	.word	0x20002548

08000d88 <ST7735_draw_monochrome_vector_image_bckg>:
	; // Unselect
	return;
}

void ST7735_draw_monochrome_vector_image_bckg(uint8_t x_start, uint8_t y_start,ImageColor *image, uint16_t color, uint16_t background_color)
{
 8000d88:	b590      	push	{r4, r7, lr}
 8000d8a:	b087      	sub	sp, #28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	603a      	str	r2, [r7, #0]
 8000d90:	461a      	mov	r2, r3
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
 8000d96:	460b      	mov	r3, r1
 8000d98:	71bb      	strb	r3, [r7, #6]
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	80bb      	strh	r3, [r7, #4]

	uint16_t i = 0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	82fb      	strh	r3, [r7, #22]
	 LCD_CS0;
 8000da2:	2200      	movs	r2, #0
 8000da4:	2140      	movs	r1, #64	; 0x40
 8000da6:	4832      	ldr	r0, [pc, #200]	; (8000e70 <ST7735_draw_monochrome_vector_image_bckg+0xe8>)
 8000da8:	f000 fd16 	bl	80017d8 <HAL_GPIO_WritePin>
	ST7735_SetAddressWindow(x_start, y_start, x_start + image->width - 1,	y_start + image->height - 1);
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	781a      	ldrb	r2, [r3, #0]
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	4413      	add	r3, r2
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	3b01      	subs	r3, #1
 8000db8:	b2dc      	uxtb	r4, r3
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	785a      	ldrb	r2, [r3, #1]
 8000dbe:	79bb      	ldrb	r3, [r7, #6]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	79b9      	ldrb	r1, [r7, #6]
 8000dca:	79f8      	ldrb	r0, [r7, #7]
 8000dcc:	4622      	mov	r2, r4
 8000dce:	f7ff fd0f 	bl	80007f0 <ST7735_SetAddressWindow>
	uint32_t count = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
	while (count < image->width * image->height)
 8000dd6:	e037      	b.n	8000e48 <ST7735_draw_monochrome_vector_image_bckg+0xc0>
	{
		for (uint8_t j = 0; j < image->data[i]; j++)
 8000dd8:	2300      	movs	r3, #0
 8000dda:	73fb      	strb	r3, [r7, #15]
 8000ddc:	e027      	b.n	8000e2e <ST7735_draw_monochrome_vector_image_bckg+0xa6>
		{
			if (image->data[i + 1] == 1)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685a      	ldr	r2, [r3, #4]
 8000de2:	8afb      	ldrh	r3, [r7, #22]
 8000de4:	3301      	adds	r3, #1
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	4413      	add	r3, r2
 8000dea:	881b      	ldrh	r3, [r3, #0]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d10c      	bne.n	8000e0a <ST7735_draw_monochrome_vector_image_bckg+0x82>
			{
				lcd7735_sendData((uint8_t)(color >> 8));
 8000df0:	88bb      	ldrh	r3, [r7, #4]
 8000df2:	0a1b      	lsrs	r3, r3, #8
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ff9f 	bl	8000d3c <lcd7735_sendData>
				lcd7735_sendData((uint8_t)(color));
 8000dfe:	88bb      	ldrh	r3, [r7, #4]
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff ff9a 	bl	8000d3c <lcd7735_sendData>
 8000e08:	e00b      	b.n	8000e22 <ST7735_draw_monochrome_vector_image_bckg+0x9a>
			} else {
				lcd7735_sendData((uint8_t)(background_color >> 8));
 8000e0a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e0c:	0a1b      	lsrs	r3, r3, #8
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff ff92 	bl	8000d3c <lcd7735_sendData>
				lcd7735_sendData((uint8_t)(background_color));
 8000e18:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff ff8d 	bl	8000d3c <lcd7735_sendData>
			}
			count++;
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	3301      	adds	r3, #1
 8000e26:	613b      	str	r3, [r7, #16]
		for (uint8_t j = 0; j < image->data[i]; j++)
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	73fb      	strb	r3, [r7, #15]
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	b29a      	uxth	r2, r3
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	6859      	ldr	r1, [r3, #4]
 8000e36:	8afb      	ldrh	r3, [r7, #22]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	440b      	add	r3, r1
 8000e3c:	881b      	ldrh	r3, [r3, #0]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d3cd      	bcc.n	8000dde <ST7735_draw_monochrome_vector_image_bckg+0x56>
		}
		i += 2;
 8000e42:	8afb      	ldrh	r3, [r7, #22]
 8000e44:	3302      	adds	r3, #2
 8000e46:	82fb      	strh	r3, [r7, #22]
	while (count < image->width * image->height)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	785b      	ldrb	r3, [r3, #1]
 8000e52:	fb02 f303 	mul.w	r3, r2, r3
 8000e56:	461a      	mov	r2, r3
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d3bc      	bcc.n	8000dd8 <ST7735_draw_monochrome_vector_image_bckg+0x50>
	}

	LCD_CS1
 8000e5e:	2201      	movs	r2, #1
 8000e60:	2140      	movs	r1, #64	; 0x40
 8000e62:	4803      	ldr	r0, [pc, #12]	; (8000e70 <ST7735_draw_monochrome_vector_image_bckg+0xe8>)
 8000e64:	f000 fcb8 	bl	80017d8 <HAL_GPIO_WritePin>
	; // Unselect
	return;
 8000e68:	bf00      	nop
}
 8000e6a:	371c      	adds	r7, #28
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd90      	pop	{r4, r7, pc}
 8000e70:	48000400 	.word	0x48000400

08000e74 <ST7735_draw_color_image>:

void ST7735_draw_color_image(uint8_t x_start, uint8_t y_start,
		ImageColor *image) {
 8000e74:	b590      	push	{r4, r7, lr}
 8000e76:	b087      	sub	sp, #28
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	603a      	str	r2, [r7, #0]
 8000e7e:	71fb      	strb	r3, [r7, #7]
 8000e80:	460b      	mov	r3, r1
 8000e82:	71bb      	strb	r3, [r7, #6]
	int m = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	60bb      	str	r3, [r7, #8]
	int i = 0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
	LCD_CS0;
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2140      	movs	r1, #64	; 0x40
 8000e90:	482d      	ldr	r0, [pc, #180]	; (8000f48 <ST7735_draw_color_image+0xd4>)
 8000e92:	f000 fca1 	bl	80017d8 <HAL_GPIO_WritePin>
	ST7735_SetAddressWindow(x_start, y_start, x_start + image->width - 1,
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	781a      	ldrb	r2, [r3, #0]
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	3b01      	subs	r3, #1
 8000ea2:	b2dc      	uxtb	r4, r3
			y_start + image->height - 1);
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	785a      	ldrb	r2, [r3, #1]
 8000ea8:	79bb      	ldrb	r3, [r7, #6]
 8000eaa:	4413      	add	r3, r2
 8000eac:	b2db      	uxtb	r3, r3
	ST7735_SetAddressWindow(x_start, y_start, x_start + image->width - 1,
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	79b9      	ldrb	r1, [r7, #6]
 8000eb4:	79f8      	ldrb	r0, [r7, #7]
 8000eb6:	4622      	mov	r2, r4
 8000eb8:	f7ff fc9a 	bl	80007f0 <ST7735_SetAddressWindow>

	uint32_t count = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	613b      	str	r3, [r7, #16]
	while (count < image->width * image->height) {
 8000ec0:	e02d      	b.n	8000f1e <ST7735_draw_color_image+0xaa>
		for (uint8_t j = 0; j < image->data[i]; j++) {
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	73fb      	strb	r3, [r7, #15]
 8000ec6:	e01d      	b.n	8000f04 <ST7735_draw_color_image+0x90>
			lcd7735_sendData((uint8_t) (image->data[i + 1] >> 8));
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685a      	ldr	r2, [r3, #4]
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	4413      	add	r3, r2
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	0a1b      	lsrs	r3, r3, #8
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff2d 	bl	8000d3c <lcd7735_sendData>
			lcd7735_sendData((uint8_t) (image->data[i + 1]));
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685a      	ldr	r2, [r3, #4]
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	4413      	add	r3, r2
 8000eee:	881b      	ldrh	r3, [r3, #0]
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff ff22 	bl	8000d3c <lcd7735_sendData>

			count++;
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	3301      	adds	r3, #1
 8000efc:	613b      	str	r3, [r7, #16]
		for (uint8_t j = 0; j < image->data[i]; j++) {
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	3301      	adds	r3, #1
 8000f02:	73fb      	strb	r3, [r7, #15]
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	6859      	ldr	r1, [r3, #4]
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	440b      	add	r3, r1
 8000f12:	881b      	ldrh	r3, [r3, #0]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d3d7      	bcc.n	8000ec8 <ST7735_draw_color_image+0x54>
		}
		i += 2;
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	3302      	adds	r3, #2
 8000f1c:	617b      	str	r3, [r7, #20]
	while (count < image->width * image->height) {
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	461a      	mov	r2, r3
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	785b      	ldrb	r3, [r3, #1]
 8000f28:	fb02 f303 	mul.w	r3, r2, r3
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d3c6      	bcc.n	8000ec2 <ST7735_draw_color_image+0x4e>
	}

	LCD_CS1
 8000f34:	2201      	movs	r2, #1
 8000f36:	2140      	movs	r1, #64	; 0x40
 8000f38:	4803      	ldr	r0, [pc, #12]	; (8000f48 <ST7735_draw_color_image+0xd4>)
 8000f3a:	f000 fc4d 	bl	80017d8 <HAL_GPIO_WritePin>
	; // Unselect
	return;
 8000f3e:	bf00      	nop
}
 8000f40:	371c      	adds	r7, #28
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd90      	pop	{r4, r7, pc}
 8000f46:	bf00      	nop
 8000f48:	48000400 	.word	0x48000400

08000f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <HAL_MspInit+0x44>)
 8000f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f56:	4a0e      	ldr	r2, [pc, #56]	; (8000f90 <HAL_MspInit+0x44>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <HAL_MspInit+0x44>)
 8000f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <HAL_MspInit+0x44>)
 8000f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6e:	4a08      	ldr	r2, [pc, #32]	; (8000f90 <HAL_MspInit+0x44>)
 8000f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f74:	6593      	str	r3, [r2, #88]	; 0x58
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_MspInit+0x44>)
 8000f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	40021000 	.word	0x40021000

08000f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <NMI_Handler+0x4>

08000f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9e:	e7fe      	b.n	8000f9e <HardFault_Handler+0x4>

08000fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <MemManage_Handler+0x4>

08000fa6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000faa:	e7fe      	b.n	8000faa <BusFault_Handler+0x4>

08000fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <UsageFault_Handler+0x4>

08000fb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe0:	f000 f926 	bl	8001230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <SystemInit+0x20>)
 8000fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ff2:	4a05      	ldr	r2, [pc, #20]	; (8001008 <SystemInit+0x20>)
 8000ff4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001010:	4b14      	ldr	r3, [pc, #80]	; (8001064 <MX_USART2_UART_Init+0x58>)
 8001012:	4a15      	ldr	r2, [pc, #84]	; (8001068 <MX_USART2_UART_Init+0x5c>)
 8001014:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001016:	4b13      	ldr	r3, [pc, #76]	; (8001064 <MX_USART2_UART_Init+0x58>)
 8001018:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800101c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_USART2_UART_Init+0x58>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001024:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_USART2_UART_Init+0x58>)
 8001026:	2200      	movs	r2, #0
 8001028:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <MX_USART2_UART_Init+0x58>)
 800102c:	2200      	movs	r2, #0
 800102e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001030:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <MX_USART2_UART_Init+0x58>)
 8001032:	220c      	movs	r2, #12
 8001034:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001036:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <MX_USART2_UART_Init+0x58>)
 8001038:	2200      	movs	r2, #0
 800103a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800103c:	4b09      	ldr	r3, [pc, #36]	; (8001064 <MX_USART2_UART_Init+0x58>)
 800103e:	2200      	movs	r2, #0
 8001040:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001042:	4b08      	ldr	r3, [pc, #32]	; (8001064 <MX_USART2_UART_Init+0x58>)
 8001044:	2200      	movs	r2, #0
 8001046:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <MX_USART2_UART_Init+0x58>)
 800104a:	2200      	movs	r2, #0
 800104c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800104e:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_USART2_UART_Init+0x58>)
 8001050:	f002 fa70 	bl	8003534 <HAL_UART_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800105a:	f7ff fb44 	bl	80006e6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200025ac 	.word	0x200025ac
 8001068:	40004400 	.word	0x40004400

0800106c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b0ac      	sub	sp, #176	; 0xb0
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	2288      	movs	r2, #136	; 0x88
 800108a:	2100      	movs	r1, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f002 ff2b 	bl	8003ee8 <memset>
  if(uartHandle->Instance==USART2)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a21      	ldr	r2, [pc, #132]	; (800111c <HAL_UART_MspInit+0xb0>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d13b      	bne.n	8001114 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800109c:	2302      	movs	r3, #2
 800109e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010a0:	2300      	movs	r3, #0
 80010a2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	4618      	mov	r0, r3
 80010aa:	f001 fa11 	bl	80024d0 <HAL_RCCEx_PeriphCLKConfig>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010b4:	f7ff fb17 	bl	80006e6 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010b8:	4b19      	ldr	r3, [pc, #100]	; (8001120 <HAL_UART_MspInit+0xb4>)
 80010ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010bc:	4a18      	ldr	r2, [pc, #96]	; (8001120 <HAL_UART_MspInit+0xb4>)
 80010be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c2:	6593      	str	r3, [r2, #88]	; 0x58
 80010c4:	4b16      	ldr	r3, [pc, #88]	; (8001120 <HAL_UART_MspInit+0xb4>)
 80010c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d0:	4b13      	ldr	r3, [pc, #76]	; (8001120 <HAL_UART_MspInit+0xb4>)
 80010d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d4:	4a12      	ldr	r2, [pc, #72]	; (8001120 <HAL_UART_MspInit+0xb4>)
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010dc:	4b10      	ldr	r3, [pc, #64]	; (8001120 <HAL_UART_MspInit+0xb4>)
 80010de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010e8:	230c      	movs	r3, #12
 80010ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fa:	2303      	movs	r3, #3
 80010fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001100:	2307      	movs	r3, #7
 8001102:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001106:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800110a:	4619      	mov	r1, r3
 800110c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001110:	f000 f9b8 	bl	8001484 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001114:	bf00      	nop
 8001116:	37b0      	adds	r7, #176	; 0xb0
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40004400 	.word	0x40004400
 8001120:	40021000 	.word	0x40021000

08001124 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001124:	f8df d034 	ldr.w	sp, [pc, #52]	; 800115c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001128:	f7ff ff5e 	bl	8000fe8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800112c:	480c      	ldr	r0, [pc, #48]	; (8001160 <LoopForever+0x6>)
  ldr r1, =_edata
 800112e:	490d      	ldr	r1, [pc, #52]	; (8001164 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001130:	4a0d      	ldr	r2, [pc, #52]	; (8001168 <LoopForever+0xe>)
  movs r3, #0
 8001132:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001134:	e002      	b.n	800113c <LoopCopyDataInit>

08001136 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001136:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001138:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800113a:	3304      	adds	r3, #4

0800113c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800113c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800113e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001140:	d3f9      	bcc.n	8001136 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001142:	4a0a      	ldr	r2, [pc, #40]	; (800116c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001144:	4c0a      	ldr	r4, [pc, #40]	; (8001170 <LoopForever+0x16>)
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001148:	e001      	b.n	800114e <LoopFillZerobss>

0800114a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800114a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800114c:	3204      	adds	r2, #4

0800114e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800114e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001150:	d3fb      	bcc.n	800114a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001152:	f002 fea5 	bl	8003ea0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001156:	f7ff fa49 	bl	80005ec <main>

0800115a <LoopForever>:

LoopForever:
    b LoopForever
 800115a:	e7fe      	b.n	800115a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800115c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001164:	2000252c 	.word	0x2000252c
  ldr r2, =_sidata
 8001168:	08003f68 	.word	0x08003f68
  ldr r2, =_sbss
 800116c:	2000252c 	.word	0x2000252c
  ldr r4, =_ebss
 8001170:	20002634 	.word	0x20002634

08001174 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001174:	e7fe      	b.n	8001174 <ADC1_2_IRQHandler>
	...

08001178 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800117e:	2300      	movs	r3, #0
 8001180:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001182:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <HAL_Init+0x3c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a0b      	ldr	r2, [pc, #44]	; (80011b4 <HAL_Init+0x3c>)
 8001188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800118c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800118e:	2003      	movs	r0, #3
 8001190:	f000 f944 	bl	800141c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001194:	2000      	movs	r0, #0
 8001196:	f000 f80f 	bl	80011b8 <HAL_InitTick>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d002      	beq.n	80011a6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	71fb      	strb	r3, [r7, #7]
 80011a4:	e001      	b.n	80011aa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011a6:	f7ff fed1 	bl	8000f4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011aa:	79fb      	ldrb	r3, [r7, #7]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40022000 	.word	0x40022000

080011b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011c0:	2300      	movs	r3, #0
 80011c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011c4:	4b17      	ldr	r3, [pc, #92]	; (8001224 <HAL_InitTick+0x6c>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d023      	beq.n	8001214 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011cc:	4b16      	ldr	r3, [pc, #88]	; (8001228 <HAL_InitTick+0x70>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4b14      	ldr	r3, [pc, #80]	; (8001224 <HAL_InitTick+0x6c>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	4619      	mov	r1, r3
 80011d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011da:	fbb3 f3f1 	udiv	r3, r3, r1
 80011de:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 f941 	bl	800146a <HAL_SYSTICK_Config>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10f      	bne.n	800120e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b0f      	cmp	r3, #15
 80011f2:	d809      	bhi.n	8001208 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f4:	2200      	movs	r2, #0
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295
 80011fc:	f000 f919 	bl	8001432 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001200:	4a0a      	ldr	r2, [pc, #40]	; (800122c <HAL_InitTick+0x74>)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	e007      	b.n	8001218 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	73fb      	strb	r3, [r7, #15]
 800120c:	e004      	b.n	8001218 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	73fb      	strb	r3, [r7, #15]
 8001212:	e001      	b.n	8001218 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001218:	7bfb      	ldrb	r3, [r7, #15]
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20002528 	.word	0x20002528
 8001228:	20002520 	.word	0x20002520
 800122c:	20002524 	.word	0x20002524

08001230 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <HAL_IncTick+0x20>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	461a      	mov	r2, r3
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <HAL_IncTick+0x24>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4413      	add	r3, r2
 8001240:	4a04      	ldr	r2, [pc, #16]	; (8001254 <HAL_IncTick+0x24>)
 8001242:	6013      	str	r3, [r2, #0]
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	20002528 	.word	0x20002528
 8001254:	20002630 	.word	0x20002630

08001258 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return uwTick;
 800125c:	4b03      	ldr	r3, [pc, #12]	; (800126c <HAL_GetTick+0x14>)
 800125e:	681b      	ldr	r3, [r3, #0]
}
 8001260:	4618      	mov	r0, r3
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	20002630 	.word	0x20002630

08001270 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001278:	f7ff ffee 	bl	8001258 <HAL_GetTick>
 800127c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001288:	d005      	beq.n	8001296 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800128a:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <HAL_Delay+0x44>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4413      	add	r3, r2
 8001294:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001296:	bf00      	nop
 8001298:	f7ff ffde 	bl	8001258 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d8f7      	bhi.n	8001298 <HAL_Delay+0x28>
  {
  }
}
 80012a8:	bf00      	nop
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20002528 	.word	0x20002528

080012b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <__NVIC_SetPriorityGrouping+0x44>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ce:	68ba      	ldr	r2, [r7, #8]
 80012d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012d4:	4013      	ands	r3, r2
 80012d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ea:	4a04      	ldr	r2, [pc, #16]	; (80012fc <__NVIC_SetPriorityGrouping+0x44>)
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	60d3      	str	r3, [r2, #12]
}
 80012f0:	bf00      	nop
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001304:	4b04      	ldr	r3, [pc, #16]	; (8001318 <__NVIC_GetPriorityGrouping+0x18>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	0a1b      	lsrs	r3, r3, #8
 800130a:	f003 0307 	and.w	r3, r3, #7
}
 800130e:	4618      	mov	r0, r3
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	6039      	str	r1, [r7, #0]
 8001326:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132c:	2b00      	cmp	r3, #0
 800132e:	db0a      	blt.n	8001346 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	b2da      	uxtb	r2, r3
 8001334:	490c      	ldr	r1, [pc, #48]	; (8001368 <__NVIC_SetPriority+0x4c>)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	0112      	lsls	r2, r2, #4
 800133c:	b2d2      	uxtb	r2, r2
 800133e:	440b      	add	r3, r1
 8001340:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001344:	e00a      	b.n	800135c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	b2da      	uxtb	r2, r3
 800134a:	4908      	ldr	r1, [pc, #32]	; (800136c <__NVIC_SetPriority+0x50>)
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	f003 030f 	and.w	r3, r3, #15
 8001352:	3b04      	subs	r3, #4
 8001354:	0112      	lsls	r2, r2, #4
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	440b      	add	r3, r1
 800135a:	761a      	strb	r2, [r3, #24]
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000e100 	.word	0xe000e100
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001370:	b480      	push	{r7}
 8001372:	b089      	sub	sp, #36	; 0x24
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f1c3 0307 	rsb	r3, r3, #7
 800138a:	2b04      	cmp	r3, #4
 800138c:	bf28      	it	cs
 800138e:	2304      	movcs	r3, #4
 8001390:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3304      	adds	r3, #4
 8001396:	2b06      	cmp	r3, #6
 8001398:	d902      	bls.n	80013a0 <NVIC_EncodePriority+0x30>
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3b03      	subs	r3, #3
 800139e:	e000      	b.n	80013a2 <NVIC_EncodePriority+0x32>
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a4:	f04f 32ff 	mov.w	r2, #4294967295
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43da      	mvns	r2, r3
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	401a      	ands	r2, r3
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b8:	f04f 31ff 	mov.w	r1, #4294967295
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	fa01 f303 	lsl.w	r3, r1, r3
 80013c2:	43d9      	mvns	r1, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c8:	4313      	orrs	r3, r2
         );
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3724      	adds	r7, #36	; 0x24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
	...

080013d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013e8:	d301      	bcc.n	80013ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ea:	2301      	movs	r3, #1
 80013ec:	e00f      	b.n	800140e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ee:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <SysTick_Config+0x40>)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013f6:	210f      	movs	r1, #15
 80013f8:	f04f 30ff 	mov.w	r0, #4294967295
 80013fc:	f7ff ff8e 	bl	800131c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <SysTick_Config+0x40>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001406:	4b04      	ldr	r3, [pc, #16]	; (8001418 <SysTick_Config+0x40>)
 8001408:	2207      	movs	r2, #7
 800140a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	e000e010 	.word	0xe000e010

0800141c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff ff47 	bl	80012b8 <__NVIC_SetPriorityGrouping>
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b086      	sub	sp, #24
 8001436:	af00      	add	r7, sp, #0
 8001438:	4603      	mov	r3, r0
 800143a:	60b9      	str	r1, [r7, #8]
 800143c:	607a      	str	r2, [r7, #4]
 800143e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001444:	f7ff ff5c 	bl	8001300 <__NVIC_GetPriorityGrouping>
 8001448:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	68b9      	ldr	r1, [r7, #8]
 800144e:	6978      	ldr	r0, [r7, #20]
 8001450:	f7ff ff8e 	bl	8001370 <NVIC_EncodePriority>
 8001454:	4602      	mov	r2, r0
 8001456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145a:	4611      	mov	r1, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff5d 	bl	800131c <__NVIC_SetPriority>
}
 8001462:	bf00      	nop
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff ffb0 	bl	80013d8 <SysTick_Config>
 8001478:	4603      	mov	r3, r0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001484:	b480      	push	{r7}
 8001486:	b087      	sub	sp, #28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800148e:	2300      	movs	r3, #0
 8001490:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001492:	e17f      	b.n	8001794 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	2101      	movs	r1, #1
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	fa01 f303 	lsl.w	r3, r1, r3
 80014a0:	4013      	ands	r3, r2
 80014a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f000 8171 	beq.w	800178e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f003 0303 	and.w	r3, r3, #3
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d005      	beq.n	80014c4 <HAL_GPIO_Init+0x40>
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 0303 	and.w	r3, r3, #3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d130      	bne.n	8001526 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	2203      	movs	r2, #3
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	4013      	ands	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	68da      	ldr	r2, [r3, #12]
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014fa:	2201      	movs	r2, #1
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43db      	mvns	r3, r3
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	4013      	ands	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	091b      	lsrs	r3, r3, #4
 8001510:	f003 0201 	and.w	r2, r3, #1
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	4313      	orrs	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f003 0303 	and.w	r3, r3, #3
 800152e:	2b03      	cmp	r3, #3
 8001530:	d118      	bne.n	8001564 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001536:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001538:	2201      	movs	r2, #1
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4013      	ands	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	08db      	lsrs	r3, r3, #3
 800154e:	f003 0201 	and.w	r2, r3, #1
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4313      	orrs	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	2b03      	cmp	r3, #3
 800156e:	d017      	beq.n	80015a0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	2203      	movs	r2, #3
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	43db      	mvns	r3, r3
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4013      	ands	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	4313      	orrs	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 0303 	and.w	r3, r3, #3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d123      	bne.n	80015f4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	08da      	lsrs	r2, r3, #3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3208      	adds	r2, #8
 80015b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	f003 0307 	and.w	r3, r3, #7
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	220f      	movs	r2, #15
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4013      	ands	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	691a      	ldr	r2, [r3, #16]
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	08da      	lsrs	r2, r3, #3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3208      	adds	r2, #8
 80015ee:	6939      	ldr	r1, [r7, #16]
 80015f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	2203      	movs	r2, #3
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4013      	ands	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 0203 	and.w	r2, r3, #3
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	4313      	orrs	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001630:	2b00      	cmp	r3, #0
 8001632:	f000 80ac 	beq.w	800178e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001636:	4b5f      	ldr	r3, [pc, #380]	; (80017b4 <HAL_GPIO_Init+0x330>)
 8001638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800163a:	4a5e      	ldr	r2, [pc, #376]	; (80017b4 <HAL_GPIO_Init+0x330>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6613      	str	r3, [r2, #96]	; 0x60
 8001642:	4b5c      	ldr	r3, [pc, #368]	; (80017b4 <HAL_GPIO_Init+0x330>)
 8001644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800164e:	4a5a      	ldr	r2, [pc, #360]	; (80017b8 <HAL_GPIO_Init+0x334>)
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	089b      	lsrs	r3, r3, #2
 8001654:	3302      	adds	r3, #2
 8001656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800165a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	f003 0303 	and.w	r3, r3, #3
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	220f      	movs	r2, #15
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43db      	mvns	r3, r3
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	4013      	ands	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001678:	d025      	beq.n	80016c6 <HAL_GPIO_Init+0x242>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a4f      	ldr	r2, [pc, #316]	; (80017bc <HAL_GPIO_Init+0x338>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d01f      	beq.n	80016c2 <HAL_GPIO_Init+0x23e>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a4e      	ldr	r2, [pc, #312]	; (80017c0 <HAL_GPIO_Init+0x33c>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d019      	beq.n	80016be <HAL_GPIO_Init+0x23a>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a4d      	ldr	r2, [pc, #308]	; (80017c4 <HAL_GPIO_Init+0x340>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d013      	beq.n	80016ba <HAL_GPIO_Init+0x236>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a4c      	ldr	r2, [pc, #304]	; (80017c8 <HAL_GPIO_Init+0x344>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d00d      	beq.n	80016b6 <HAL_GPIO_Init+0x232>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a4b      	ldr	r2, [pc, #300]	; (80017cc <HAL_GPIO_Init+0x348>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d007      	beq.n	80016b2 <HAL_GPIO_Init+0x22e>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a4a      	ldr	r2, [pc, #296]	; (80017d0 <HAL_GPIO_Init+0x34c>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d101      	bne.n	80016ae <HAL_GPIO_Init+0x22a>
 80016aa:	2306      	movs	r3, #6
 80016ac:	e00c      	b.n	80016c8 <HAL_GPIO_Init+0x244>
 80016ae:	2307      	movs	r3, #7
 80016b0:	e00a      	b.n	80016c8 <HAL_GPIO_Init+0x244>
 80016b2:	2305      	movs	r3, #5
 80016b4:	e008      	b.n	80016c8 <HAL_GPIO_Init+0x244>
 80016b6:	2304      	movs	r3, #4
 80016b8:	e006      	b.n	80016c8 <HAL_GPIO_Init+0x244>
 80016ba:	2303      	movs	r3, #3
 80016bc:	e004      	b.n	80016c8 <HAL_GPIO_Init+0x244>
 80016be:	2302      	movs	r3, #2
 80016c0:	e002      	b.n	80016c8 <HAL_GPIO_Init+0x244>
 80016c2:	2301      	movs	r3, #1
 80016c4:	e000      	b.n	80016c8 <HAL_GPIO_Init+0x244>
 80016c6:	2300      	movs	r3, #0
 80016c8:	697a      	ldr	r2, [r7, #20]
 80016ca:	f002 0203 	and.w	r2, r2, #3
 80016ce:	0092      	lsls	r2, r2, #2
 80016d0:	4093      	lsls	r3, r2
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016d8:	4937      	ldr	r1, [pc, #220]	; (80017b8 <HAL_GPIO_Init+0x334>)
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	089b      	lsrs	r3, r3, #2
 80016de:	3302      	adds	r3, #2
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016e6:	4b3b      	ldr	r3, [pc, #236]	; (80017d4 <HAL_GPIO_Init+0x350>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	43db      	mvns	r3, r3
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	4013      	ands	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	4313      	orrs	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800170a:	4a32      	ldr	r2, [pc, #200]	; (80017d4 <HAL_GPIO_Init+0x350>)
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001710:	4b30      	ldr	r3, [pc, #192]	; (80017d4 <HAL_GPIO_Init+0x350>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	43db      	mvns	r3, r3
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	4013      	ands	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d003      	beq.n	8001734 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	4313      	orrs	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001734:	4a27      	ldr	r2, [pc, #156]	; (80017d4 <HAL_GPIO_Init+0x350>)
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800173a:	4b26      	ldr	r3, [pc, #152]	; (80017d4 <HAL_GPIO_Init+0x350>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	43db      	mvns	r3, r3
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	4013      	ands	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4313      	orrs	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800175e:	4a1d      	ldr	r2, [pc, #116]	; (80017d4 <HAL_GPIO_Init+0x350>)
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001764:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <HAL_GPIO_Init+0x350>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	43db      	mvns	r3, r3
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d003      	beq.n	8001788 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	4313      	orrs	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001788:	4a12      	ldr	r2, [pc, #72]	; (80017d4 <HAL_GPIO_Init+0x350>)
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	3301      	adds	r3, #1
 8001792:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	fa22 f303 	lsr.w	r3, r2, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f47f ae78 	bne.w	8001494 <HAL_GPIO_Init+0x10>
  }
}
 80017a4:	bf00      	nop
 80017a6:	bf00      	nop
 80017a8:	371c      	adds	r7, #28
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40010000 	.word	0x40010000
 80017bc:	48000400 	.word	0x48000400
 80017c0:	48000800 	.word	0x48000800
 80017c4:	48000c00 	.word	0x48000c00
 80017c8:	48001000 	.word	0x48001000
 80017cc:	48001400 	.word	0x48001400
 80017d0:	48001800 	.word	0x48001800
 80017d4:	40010400 	.word	0x40010400

080017d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	807b      	strh	r3, [r7, #2]
 80017e4:	4613      	mov	r3, r2
 80017e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017e8:	787b      	ldrb	r3, [r7, #1]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017ee:	887a      	ldrh	r2, [r7, #2]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017f4:	e002      	b.n	80017fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017f6:	887a      	ldrh	r2, [r7, #2]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800180c:	4b04      	ldr	r3, [pc, #16]	; (8001820 <HAL_PWREx_GetVoltageRange+0x18>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001814:	4618      	mov	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	40007000 	.word	0x40007000

08001824 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001832:	d130      	bne.n	8001896 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001834:	4b23      	ldr	r3, [pc, #140]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800183c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001840:	d038      	beq.n	80018b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001842:	4b20      	ldr	r3, [pc, #128]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800184a:	4a1e      	ldr	r2, [pc, #120]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800184c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001850:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001852:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2232      	movs	r2, #50	; 0x32
 8001858:	fb02 f303 	mul.w	r3, r2, r3
 800185c:	4a1b      	ldr	r2, [pc, #108]	; (80018cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800185e:	fba2 2303 	umull	r2, r3, r2, r3
 8001862:	0c9b      	lsrs	r3, r3, #18
 8001864:	3301      	adds	r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001868:	e002      	b.n	8001870 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	3b01      	subs	r3, #1
 800186e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001870:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800187c:	d102      	bne.n	8001884 <HAL_PWREx_ControlVoltageScaling+0x60>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d1f2      	bne.n	800186a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001884:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800188c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001890:	d110      	bne.n	80018b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e00f      	b.n	80018b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001896:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800189e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018a2:	d007      	beq.n	80018b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018a4:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018ac:	4a05      	ldr	r2, [pc, #20]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3714      	adds	r7, #20
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	40007000 	.word	0x40007000
 80018c8:	20002520 	.word	0x20002520
 80018cc:	431bde83 	.word	0x431bde83

080018d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b088      	sub	sp, #32
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e3ca      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018e2:	4b97      	ldr	r3, [pc, #604]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f003 030c 	and.w	r3, r3, #12
 80018ea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018ec:	4b94      	ldr	r3, [pc, #592]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	f003 0303 	and.w	r3, r3, #3
 80018f4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0310 	and.w	r3, r3, #16
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f000 80e4 	beq.w	8001acc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d007      	beq.n	800191a <HAL_RCC_OscConfig+0x4a>
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	2b0c      	cmp	r3, #12
 800190e:	f040 808b 	bne.w	8001a28 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	2b01      	cmp	r3, #1
 8001916:	f040 8087 	bne.w	8001a28 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800191a:	4b89      	ldr	r3, [pc, #548]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d005      	beq.n	8001932 <HAL_RCC_OscConfig+0x62>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e3a2      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a1a      	ldr	r2, [r3, #32]
 8001936:	4b82      	ldr	r3, [pc, #520]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0308 	and.w	r3, r3, #8
 800193e:	2b00      	cmp	r3, #0
 8001940:	d004      	beq.n	800194c <HAL_RCC_OscConfig+0x7c>
 8001942:	4b7f      	ldr	r3, [pc, #508]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800194a:	e005      	b.n	8001958 <HAL_RCC_OscConfig+0x88>
 800194c:	4b7c      	ldr	r3, [pc, #496]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 800194e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001952:	091b      	lsrs	r3, r3, #4
 8001954:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001958:	4293      	cmp	r3, r2
 800195a:	d223      	bcs.n	80019a4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	4618      	mov	r0, r3
 8001962:	f000 fd55 	bl	8002410 <RCC_SetFlashLatencyFromMSIRange>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e383      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001970:	4b73      	ldr	r3, [pc, #460]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a72      	ldr	r2, [pc, #456]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001976:	f043 0308 	orr.w	r3, r3, #8
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	4b70      	ldr	r3, [pc, #448]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	496d      	ldr	r1, [pc, #436]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 800198a:	4313      	orrs	r3, r2
 800198c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800198e:	4b6c      	ldr	r3, [pc, #432]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	021b      	lsls	r3, r3, #8
 800199c:	4968      	ldr	r1, [pc, #416]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	604b      	str	r3, [r1, #4]
 80019a2:	e025      	b.n	80019f0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019a4:	4b66      	ldr	r3, [pc, #408]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a65      	ldr	r2, [pc, #404]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 80019aa:	f043 0308 	orr.w	r3, r3, #8
 80019ae:	6013      	str	r3, [r2, #0]
 80019b0:	4b63      	ldr	r3, [pc, #396]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	4960      	ldr	r1, [pc, #384]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019c2:	4b5f      	ldr	r3, [pc, #380]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	021b      	lsls	r3, r3, #8
 80019d0:	495b      	ldr	r1, [pc, #364]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d109      	bne.n	80019f0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f000 fd15 	bl	8002410 <RCC_SetFlashLatencyFromMSIRange>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e343      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019f0:	f000 fc4a 	bl	8002288 <HAL_RCC_GetSysClockFreq>
 80019f4:	4602      	mov	r2, r0
 80019f6:	4b52      	ldr	r3, [pc, #328]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	091b      	lsrs	r3, r3, #4
 80019fc:	f003 030f 	and.w	r3, r3, #15
 8001a00:	4950      	ldr	r1, [pc, #320]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 8001a02:	5ccb      	ldrb	r3, [r1, r3]
 8001a04:	f003 031f 	and.w	r3, r3, #31
 8001a08:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0c:	4a4e      	ldr	r2, [pc, #312]	; (8001b48 <HAL_RCC_OscConfig+0x278>)
 8001a0e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a10:	4b4e      	ldr	r3, [pc, #312]	; (8001b4c <HAL_RCC_OscConfig+0x27c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff fbcf 	bl	80011b8 <HAL_InitTick>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d052      	beq.n	8001aca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
 8001a26:	e327      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d032      	beq.n	8001a96 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a30:	4b43      	ldr	r3, [pc, #268]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a42      	ldr	r2, [pc, #264]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a3c:	f7ff fc0c 	bl	8001258 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a44:	f7ff fc08 	bl	8001258 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e310      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a56:	4b3a      	ldr	r3, [pc, #232]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a62:	4b37      	ldr	r3, [pc, #220]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a36      	ldr	r2, [pc, #216]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001a68:	f043 0308 	orr.w	r3, r3, #8
 8001a6c:	6013      	str	r3, [r2, #0]
 8001a6e:	4b34      	ldr	r3, [pc, #208]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a1b      	ldr	r3, [r3, #32]
 8001a7a:	4931      	ldr	r1, [pc, #196]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a80:	4b2f      	ldr	r3, [pc, #188]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69db      	ldr	r3, [r3, #28]
 8001a8c:	021b      	lsls	r3, r3, #8
 8001a8e:	492c      	ldr	r1, [pc, #176]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	604b      	str	r3, [r1, #4]
 8001a94:	e01a      	b.n	8001acc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a96:	4b2a      	ldr	r3, [pc, #168]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a29      	ldr	r2, [pc, #164]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001a9c:	f023 0301 	bic.w	r3, r3, #1
 8001aa0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001aa2:	f7ff fbd9 	bl	8001258 <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001aaa:	f7ff fbd5 	bl	8001258 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e2dd      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001abc:	4b20      	ldr	r3, [pc, #128]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1f0      	bne.n	8001aaa <HAL_RCC_OscConfig+0x1da>
 8001ac8:	e000      	b.n	8001acc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001aca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d074      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	2b08      	cmp	r3, #8
 8001adc:	d005      	beq.n	8001aea <HAL_RCC_OscConfig+0x21a>
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	2b0c      	cmp	r3, #12
 8001ae2:	d10e      	bne.n	8001b02 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	2b03      	cmp	r3, #3
 8001ae8:	d10b      	bne.n	8001b02 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aea:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d064      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x2f0>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d160      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e2ba      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b0a:	d106      	bne.n	8001b1a <HAL_RCC_OscConfig+0x24a>
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a0b      	ldr	r2, [pc, #44]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	e026      	b.n	8001b68 <HAL_RCC_OscConfig+0x298>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b22:	d115      	bne.n	8001b50 <HAL_RCC_OscConfig+0x280>
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a05      	ldr	r2, [pc, #20]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001b2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	4b03      	ldr	r3, [pc, #12]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a02      	ldr	r2, [pc, #8]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	e014      	b.n	8001b68 <HAL_RCC_OscConfig+0x298>
 8001b3e:	bf00      	nop
 8001b40:	40021000 	.word	0x40021000
 8001b44:	08003f10 	.word	0x08003f10
 8001b48:	20002520 	.word	0x20002520
 8001b4c:	20002524 	.word	0x20002524
 8001b50:	4ba0      	ldr	r3, [pc, #640]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a9f      	ldr	r2, [pc, #636]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b5a:	6013      	str	r3, [r2, #0]
 8001b5c:	4b9d      	ldr	r3, [pc, #628]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a9c      	ldr	r2, [pc, #624]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d013      	beq.n	8001b98 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b70:	f7ff fb72 	bl	8001258 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b78:	f7ff fb6e 	bl	8001258 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b64      	cmp	r3, #100	; 0x64
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e276      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b8a:	4b92      	ldr	r3, [pc, #584]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0f0      	beq.n	8001b78 <HAL_RCC_OscConfig+0x2a8>
 8001b96:	e014      	b.n	8001bc2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b98:	f7ff fb5e 	bl	8001258 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba0:	f7ff fb5a 	bl	8001258 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b64      	cmp	r3, #100	; 0x64
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e262      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bb2:	4b88      	ldr	r3, [pc, #544]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f0      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x2d0>
 8001bbe:	e000      	b.n	8001bc2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d060      	beq.n	8001c90 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d005      	beq.n	8001be0 <HAL_RCC_OscConfig+0x310>
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	2b0c      	cmp	r3, #12
 8001bd8:	d119      	bne.n	8001c0e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d116      	bne.n	8001c0e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001be0:	4b7c      	ldr	r3, [pc, #496]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d005      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x328>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e23f      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf8:	4b76      	ldr	r3, [pc, #472]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	061b      	lsls	r3, r3, #24
 8001c06:	4973      	ldr	r1, [pc, #460]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c0c:	e040      	b.n	8001c90 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d023      	beq.n	8001c5e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c16:	4b6f      	ldr	r3, [pc, #444]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a6e      	ldr	r2, [pc, #440]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c22:	f7ff fb19 	bl	8001258 <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c2a:	f7ff fb15 	bl	8001258 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e21d      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c3c:	4b65      	ldr	r3, [pc, #404]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0f0      	beq.n	8001c2a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c48:	4b62      	ldr	r3, [pc, #392]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	061b      	lsls	r3, r3, #24
 8001c56:	495f      	ldr	r1, [pc, #380]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	604b      	str	r3, [r1, #4]
 8001c5c:	e018      	b.n	8001c90 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c5e:	4b5d      	ldr	r3, [pc, #372]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a5c      	ldr	r2, [pc, #368]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001c64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c6a:	f7ff faf5 	bl	8001258 <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c70:	e008      	b.n	8001c84 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c72:	f7ff faf1 	bl	8001258 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e1f9      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c84:	4b53      	ldr	r3, [pc, #332]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1f0      	bne.n	8001c72 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0308 	and.w	r3, r3, #8
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d03c      	beq.n	8001d16 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	695b      	ldr	r3, [r3, #20]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d01c      	beq.n	8001cde <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ca4:	4b4b      	ldr	r3, [pc, #300]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001caa:	4a4a      	ldr	r2, [pc, #296]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb4:	f7ff fad0 	bl	8001258 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cbc:	f7ff facc 	bl	8001258 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e1d4      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cce:	4b41      	ldr	r3, [pc, #260]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001cd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0ef      	beq.n	8001cbc <HAL_RCC_OscConfig+0x3ec>
 8001cdc:	e01b      	b.n	8001d16 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cde:	4b3d      	ldr	r3, [pc, #244]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001ce0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ce4:	4a3b      	ldr	r2, [pc, #236]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001ce6:	f023 0301 	bic.w	r3, r3, #1
 8001cea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cee:	f7ff fab3 	bl	8001258 <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cf6:	f7ff faaf 	bl	8001258 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e1b7      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d08:	4b32      	ldr	r3, [pc, #200]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1ef      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0304 	and.w	r3, r3, #4
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 80a6 	beq.w	8001e70 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d24:	2300      	movs	r3, #0
 8001d26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d28:	4b2a      	ldr	r3, [pc, #168]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10d      	bne.n	8001d50 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d34:	4b27      	ldr	r3, [pc, #156]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d38:	4a26      	ldr	r2, [pc, #152]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d3e:	6593      	str	r3, [r2, #88]	; 0x58
 8001d40:	4b24      	ldr	r3, [pc, #144]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d50:	4b21      	ldr	r3, [pc, #132]	; (8001dd8 <HAL_RCC_OscConfig+0x508>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d118      	bne.n	8001d8e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d5c:	4b1e      	ldr	r3, [pc, #120]	; (8001dd8 <HAL_RCC_OscConfig+0x508>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a1d      	ldr	r2, [pc, #116]	; (8001dd8 <HAL_RCC_OscConfig+0x508>)
 8001d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d68:	f7ff fa76 	bl	8001258 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d70:	f7ff fa72 	bl	8001258 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e17a      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d82:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <HAL_RCC_OscConfig+0x508>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d0f0      	beq.n	8001d70 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d108      	bne.n	8001da8 <HAL_RCC_OscConfig+0x4d8>
 8001d96:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d9c:	4a0d      	ldr	r2, [pc, #52]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001da6:	e029      	b.n	8001dfc <HAL_RCC_OscConfig+0x52c>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	2b05      	cmp	r3, #5
 8001dae:	d115      	bne.n	8001ddc <HAL_RCC_OscConfig+0x50c>
 8001db0:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db6:	4a07      	ldr	r2, [pc, #28]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001db8:	f043 0304 	orr.w	r3, r3, #4
 8001dbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dc0:	4b04      	ldr	r3, [pc, #16]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc6:	4a03      	ldr	r2, [pc, #12]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dd0:	e014      	b.n	8001dfc <HAL_RCC_OscConfig+0x52c>
 8001dd2:	bf00      	nop
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	40007000 	.word	0x40007000
 8001ddc:	4b9c      	ldr	r3, [pc, #624]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de2:	4a9b      	ldr	r2, [pc, #620]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001de4:	f023 0301 	bic.w	r3, r3, #1
 8001de8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dec:	4b98      	ldr	r3, [pc, #608]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df2:	4a97      	ldr	r2, [pc, #604]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001df4:	f023 0304 	bic.w	r3, r3, #4
 8001df8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d016      	beq.n	8001e32 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e04:	f7ff fa28 	bl	8001258 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e0a:	e00a      	b.n	8001e22 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0c:	f7ff fa24 	bl	8001258 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e12a      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e22:	4b8b      	ldr	r3, [pc, #556]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0ed      	beq.n	8001e0c <HAL_RCC_OscConfig+0x53c>
 8001e30:	e015      	b.n	8001e5e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e32:	f7ff fa11 	bl	8001258 <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e38:	e00a      	b.n	8001e50 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3a:	f7ff fa0d 	bl	8001258 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e113      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e50:	4b7f      	ldr	r3, [pc, #508]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1ed      	bne.n	8001e3a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e5e:	7ffb      	ldrb	r3, [r7, #31]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d105      	bne.n	8001e70 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e64:	4b7a      	ldr	r3, [pc, #488]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e68:	4a79      	ldr	r2, [pc, #484]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001e6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e6e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f000 80fe 	beq.w	8002076 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	f040 80d0 	bne.w	8002024 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e84:	4b72      	ldr	r3, [pc, #456]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	f003 0203 	and.w	r2, r3, #3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d130      	bne.n	8001efa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d127      	bne.n	8001efa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d11f      	bne.n	8001efa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ec4:	2a07      	cmp	r2, #7
 8001ec6:	bf14      	ite	ne
 8001ec8:	2201      	movne	r2, #1
 8001eca:	2200      	moveq	r2, #0
 8001ecc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d113      	bne.n	8001efa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001edc:	085b      	lsrs	r3, r3, #1
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d109      	bne.n	8001efa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef0:	085b      	lsrs	r3, r3, #1
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d06e      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	2b0c      	cmp	r3, #12
 8001efe:	d069      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f00:	4b53      	ldr	r3, [pc, #332]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d105      	bne.n	8001f18 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f0c:	4b50      	ldr	r3, [pc, #320]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e0ad      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f1c:	4b4c      	ldr	r3, [pc, #304]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a4b      	ldr	r2, [pc, #300]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001f22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f26:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f28:	f7ff f996 	bl	8001258 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f30:	f7ff f992 	bl	8001258 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e09a      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f42:	4b43      	ldr	r3, [pc, #268]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f4e:	4b40      	ldr	r3, [pc, #256]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	4b40      	ldr	r3, [pc, #256]	; (8002054 <HAL_RCC_OscConfig+0x784>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f5e:	3a01      	subs	r2, #1
 8001f60:	0112      	lsls	r2, r2, #4
 8001f62:	4311      	orrs	r1, r2
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f68:	0212      	lsls	r2, r2, #8
 8001f6a:	4311      	orrs	r1, r2
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f70:	0852      	lsrs	r2, r2, #1
 8001f72:	3a01      	subs	r2, #1
 8001f74:	0552      	lsls	r2, r2, #21
 8001f76:	4311      	orrs	r1, r2
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f7c:	0852      	lsrs	r2, r2, #1
 8001f7e:	3a01      	subs	r2, #1
 8001f80:	0652      	lsls	r2, r2, #25
 8001f82:	4311      	orrs	r1, r2
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f88:	0912      	lsrs	r2, r2, #4
 8001f8a:	0452      	lsls	r2, r2, #17
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	4930      	ldr	r1, [pc, #192]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f94:	4b2e      	ldr	r3, [pc, #184]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a2d      	ldr	r2, [pc, #180]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001f9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f9e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fa0:	4b2b      	ldr	r3, [pc, #172]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	4a2a      	ldr	r2, [pc, #168]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001fa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001faa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fac:	f7ff f954 	bl	8001258 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb4:	f7ff f950 	bl	8001258 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e058      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fc6:	4b22      	ldr	r3, [pc, #136]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d0f0      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fd2:	e050      	b.n	8002076 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e04f      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd8:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d148      	bne.n	8002076 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001fe4:	4b1a      	ldr	r3, [pc, #104]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a19      	ldr	r2, [pc, #100]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001fea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ff0:	4b17      	ldr	r3, [pc, #92]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	4a16      	ldr	r2, [pc, #88]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001ff6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ffa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ffc:	f7ff f92c 	bl	8001258 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002004:	f7ff f928 	bl	8001258 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e030      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002016:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0f0      	beq.n	8002004 <HAL_RCC_OscConfig+0x734>
 8002022:	e028      	b.n	8002076 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	2b0c      	cmp	r3, #12
 8002028:	d023      	beq.n	8002072 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800202a:	4b09      	ldr	r3, [pc, #36]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a08      	ldr	r2, [pc, #32]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8002030:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002034:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002036:	f7ff f90f 	bl	8001258 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800203c:	e00c      	b.n	8002058 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800203e:	f7ff f90b 	bl	8001258 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d905      	bls.n	8002058 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e013      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
 8002050:	40021000 	.word	0x40021000
 8002054:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002058:	4b09      	ldr	r3, [pc, #36]	; (8002080 <HAL_RCC_OscConfig+0x7b0>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1ec      	bne.n	800203e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002064:	4b06      	ldr	r3, [pc, #24]	; (8002080 <HAL_RCC_OscConfig+0x7b0>)
 8002066:	68da      	ldr	r2, [r3, #12]
 8002068:	4905      	ldr	r1, [pc, #20]	; (8002080 <HAL_RCC_OscConfig+0x7b0>)
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <HAL_RCC_OscConfig+0x7b4>)
 800206c:	4013      	ands	r3, r2
 800206e:	60cb      	str	r3, [r1, #12]
 8002070:	e001      	b.n	8002076 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e000      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3720      	adds	r7, #32
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40021000 	.word	0x40021000
 8002084:	feeefffc 	.word	0xfeeefffc

08002088 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e0e7      	b.n	800226c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800209c:	4b75      	ldr	r3, [pc, #468]	; (8002274 <HAL_RCC_ClockConfig+0x1ec>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d910      	bls.n	80020cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020aa:	4b72      	ldr	r3, [pc, #456]	; (8002274 <HAL_RCC_ClockConfig+0x1ec>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f023 0207 	bic.w	r2, r3, #7
 80020b2:	4970      	ldr	r1, [pc, #448]	; (8002274 <HAL_RCC_ClockConfig+0x1ec>)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ba:	4b6e      	ldr	r3, [pc, #440]	; (8002274 <HAL_RCC_ClockConfig+0x1ec>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d001      	beq.n	80020cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e0cf      	b.n	800226c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d010      	beq.n	80020fa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	4b66      	ldr	r3, [pc, #408]	; (8002278 <HAL_RCC_ClockConfig+0x1f0>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d908      	bls.n	80020fa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e8:	4b63      	ldr	r3, [pc, #396]	; (8002278 <HAL_RCC_ClockConfig+0x1f0>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	4960      	ldr	r1, [pc, #384]	; (8002278 <HAL_RCC_ClockConfig+0x1f0>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d04c      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b03      	cmp	r3, #3
 800210c:	d107      	bne.n	800211e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800210e:	4b5a      	ldr	r3, [pc, #360]	; (8002278 <HAL_RCC_ClockConfig+0x1f0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d121      	bne.n	800215e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e0a6      	b.n	800226c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b02      	cmp	r3, #2
 8002124:	d107      	bne.n	8002136 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002126:	4b54      	ldr	r3, [pc, #336]	; (8002278 <HAL_RCC_ClockConfig+0x1f0>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d115      	bne.n	800215e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e09a      	b.n	800226c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d107      	bne.n	800214e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800213e:	4b4e      	ldr	r3, [pc, #312]	; (8002278 <HAL_RCC_ClockConfig+0x1f0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d109      	bne.n	800215e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e08e      	b.n	800226c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800214e:	4b4a      	ldr	r3, [pc, #296]	; (8002278 <HAL_RCC_ClockConfig+0x1f0>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e086      	b.n	800226c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800215e:	4b46      	ldr	r3, [pc, #280]	; (8002278 <HAL_RCC_ClockConfig+0x1f0>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f023 0203 	bic.w	r2, r3, #3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	4943      	ldr	r1, [pc, #268]	; (8002278 <HAL_RCC_ClockConfig+0x1f0>)
 800216c:	4313      	orrs	r3, r2
 800216e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002170:	f7ff f872 	bl	8001258 <HAL_GetTick>
 8002174:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002176:	e00a      	b.n	800218e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002178:	f7ff f86e 	bl	8001258 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	f241 3288 	movw	r2, #5000	; 0x1388
 8002186:	4293      	cmp	r3, r2
 8002188:	d901      	bls.n	800218e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e06e      	b.n	800226c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800218e:	4b3a      	ldr	r3, [pc, #232]	; (8002278 <HAL_RCC_ClockConfig+0x1f0>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 020c 	and.w	r2, r3, #12
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	429a      	cmp	r2, r3
 800219e:	d1eb      	bne.n	8002178 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d010      	beq.n	80021ce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	4b31      	ldr	r3, [pc, #196]	; (8002278 <HAL_RCC_ClockConfig+0x1f0>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d208      	bcs.n	80021ce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021bc:	4b2e      	ldr	r3, [pc, #184]	; (8002278 <HAL_RCC_ClockConfig+0x1f0>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	492b      	ldr	r1, [pc, #172]	; (8002278 <HAL_RCC_ClockConfig+0x1f0>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021ce:	4b29      	ldr	r3, [pc, #164]	; (8002274 <HAL_RCC_ClockConfig+0x1ec>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d210      	bcs.n	80021fe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021dc:	4b25      	ldr	r3, [pc, #148]	; (8002274 <HAL_RCC_ClockConfig+0x1ec>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f023 0207 	bic.w	r2, r3, #7
 80021e4:	4923      	ldr	r1, [pc, #140]	; (8002274 <HAL_RCC_ClockConfig+0x1ec>)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ec:	4b21      	ldr	r3, [pc, #132]	; (8002274 <HAL_RCC_ClockConfig+0x1ec>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d001      	beq.n	80021fe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e036      	b.n	800226c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0304 	and.w	r3, r3, #4
 8002206:	2b00      	cmp	r3, #0
 8002208:	d008      	beq.n	800221c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800220a:	4b1b      	ldr	r3, [pc, #108]	; (8002278 <HAL_RCC_ClockConfig+0x1f0>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	4918      	ldr	r1, [pc, #96]	; (8002278 <HAL_RCC_ClockConfig+0x1f0>)
 8002218:	4313      	orrs	r3, r2
 800221a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0308 	and.w	r3, r3, #8
 8002224:	2b00      	cmp	r3, #0
 8002226:	d009      	beq.n	800223c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002228:	4b13      	ldr	r3, [pc, #76]	; (8002278 <HAL_RCC_ClockConfig+0x1f0>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	4910      	ldr	r1, [pc, #64]	; (8002278 <HAL_RCC_ClockConfig+0x1f0>)
 8002238:	4313      	orrs	r3, r2
 800223a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800223c:	f000 f824 	bl	8002288 <HAL_RCC_GetSysClockFreq>
 8002240:	4602      	mov	r2, r0
 8002242:	4b0d      	ldr	r3, [pc, #52]	; (8002278 <HAL_RCC_ClockConfig+0x1f0>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	091b      	lsrs	r3, r3, #4
 8002248:	f003 030f 	and.w	r3, r3, #15
 800224c:	490b      	ldr	r1, [pc, #44]	; (800227c <HAL_RCC_ClockConfig+0x1f4>)
 800224e:	5ccb      	ldrb	r3, [r1, r3]
 8002250:	f003 031f 	and.w	r3, r3, #31
 8002254:	fa22 f303 	lsr.w	r3, r2, r3
 8002258:	4a09      	ldr	r2, [pc, #36]	; (8002280 <HAL_RCC_ClockConfig+0x1f8>)
 800225a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800225c:	4b09      	ldr	r3, [pc, #36]	; (8002284 <HAL_RCC_ClockConfig+0x1fc>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe ffa9 	bl	80011b8 <HAL_InitTick>
 8002266:	4603      	mov	r3, r0
 8002268:	72fb      	strb	r3, [r7, #11]

  return status;
 800226a:	7afb      	ldrb	r3, [r7, #11]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40022000 	.word	0x40022000
 8002278:	40021000 	.word	0x40021000
 800227c:	08003f10 	.word	0x08003f10
 8002280:	20002520 	.word	0x20002520
 8002284:	20002524 	.word	0x20002524

08002288 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002288:	b480      	push	{r7}
 800228a:	b089      	sub	sp, #36	; 0x24
 800228c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800228e:	2300      	movs	r3, #0
 8002290:	61fb      	str	r3, [r7, #28]
 8002292:	2300      	movs	r3, #0
 8002294:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002296:	4b3e      	ldr	r3, [pc, #248]	; (8002390 <HAL_RCC_GetSysClockFreq+0x108>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f003 030c 	and.w	r3, r3, #12
 800229e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022a0:	4b3b      	ldr	r3, [pc, #236]	; (8002390 <HAL_RCC_GetSysClockFreq+0x108>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	f003 0303 	and.w	r3, r3, #3
 80022a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d005      	beq.n	80022bc <HAL_RCC_GetSysClockFreq+0x34>
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	2b0c      	cmp	r3, #12
 80022b4:	d121      	bne.n	80022fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d11e      	bne.n	80022fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80022bc:	4b34      	ldr	r3, [pc, #208]	; (8002390 <HAL_RCC_GetSysClockFreq+0x108>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0308 	and.w	r3, r3, #8
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d107      	bne.n	80022d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022c8:	4b31      	ldr	r3, [pc, #196]	; (8002390 <HAL_RCC_GetSysClockFreq+0x108>)
 80022ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ce:	0a1b      	lsrs	r3, r3, #8
 80022d0:	f003 030f 	and.w	r3, r3, #15
 80022d4:	61fb      	str	r3, [r7, #28]
 80022d6:	e005      	b.n	80022e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022d8:	4b2d      	ldr	r3, [pc, #180]	; (8002390 <HAL_RCC_GetSysClockFreq+0x108>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	091b      	lsrs	r3, r3, #4
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80022e4:	4a2b      	ldr	r2, [pc, #172]	; (8002394 <HAL_RCC_GetSysClockFreq+0x10c>)
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d10d      	bne.n	8002310 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022f8:	e00a      	b.n	8002310 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	d102      	bne.n	8002306 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002300:	4b25      	ldr	r3, [pc, #148]	; (8002398 <HAL_RCC_GetSysClockFreq+0x110>)
 8002302:	61bb      	str	r3, [r7, #24]
 8002304:	e004      	b.n	8002310 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	2b08      	cmp	r3, #8
 800230a:	d101      	bne.n	8002310 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800230c:	4b23      	ldr	r3, [pc, #140]	; (800239c <HAL_RCC_GetSysClockFreq+0x114>)
 800230e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	2b0c      	cmp	r3, #12
 8002314:	d134      	bne.n	8002380 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002316:	4b1e      	ldr	r3, [pc, #120]	; (8002390 <HAL_RCC_GetSysClockFreq+0x108>)
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2b02      	cmp	r3, #2
 8002324:	d003      	beq.n	800232e <HAL_RCC_GetSysClockFreq+0xa6>
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2b03      	cmp	r3, #3
 800232a:	d003      	beq.n	8002334 <HAL_RCC_GetSysClockFreq+0xac>
 800232c:	e005      	b.n	800233a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800232e:	4b1a      	ldr	r3, [pc, #104]	; (8002398 <HAL_RCC_GetSysClockFreq+0x110>)
 8002330:	617b      	str	r3, [r7, #20]
      break;
 8002332:	e005      	b.n	8002340 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002334:	4b19      	ldr	r3, [pc, #100]	; (800239c <HAL_RCC_GetSysClockFreq+0x114>)
 8002336:	617b      	str	r3, [r7, #20]
      break;
 8002338:	e002      	b.n	8002340 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	617b      	str	r3, [r7, #20]
      break;
 800233e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002340:	4b13      	ldr	r3, [pc, #76]	; (8002390 <HAL_RCC_GetSysClockFreq+0x108>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	091b      	lsrs	r3, r3, #4
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	3301      	adds	r3, #1
 800234c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800234e:	4b10      	ldr	r3, [pc, #64]	; (8002390 <HAL_RCC_GetSysClockFreq+0x108>)
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	0a1b      	lsrs	r3, r3, #8
 8002354:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	fb03 f202 	mul.w	r2, r3, r2
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	fbb2 f3f3 	udiv	r3, r2, r3
 8002364:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002366:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <HAL_RCC_GetSysClockFreq+0x108>)
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	0e5b      	lsrs	r3, r3, #25
 800236c:	f003 0303 	and.w	r3, r3, #3
 8002370:	3301      	adds	r3, #1
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	fbb2 f3f3 	udiv	r3, r2, r3
 800237e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002380:	69bb      	ldr	r3, [r7, #24]
}
 8002382:	4618      	mov	r0, r3
 8002384:	3724      	adds	r7, #36	; 0x24
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	40021000 	.word	0x40021000
 8002394:	08003f28 	.word	0x08003f28
 8002398:	00f42400 	.word	0x00f42400
 800239c:	007a1200 	.word	0x007a1200

080023a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023a4:	4b03      	ldr	r3, [pc, #12]	; (80023b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80023a6:	681b      	ldr	r3, [r3, #0]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	20002520 	.word	0x20002520

080023b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023bc:	f7ff fff0 	bl	80023a0 <HAL_RCC_GetHCLKFreq>
 80023c0:	4602      	mov	r2, r0
 80023c2:	4b06      	ldr	r3, [pc, #24]	; (80023dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	0a1b      	lsrs	r3, r3, #8
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	4904      	ldr	r1, [pc, #16]	; (80023e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023ce:	5ccb      	ldrb	r3, [r1, r3]
 80023d0:	f003 031f 	and.w	r3, r3, #31
 80023d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023d8:	4618      	mov	r0, r3
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40021000 	.word	0x40021000
 80023e0:	08003f20 	.word	0x08003f20

080023e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80023e8:	f7ff ffda 	bl	80023a0 <HAL_RCC_GetHCLKFreq>
 80023ec:	4602      	mov	r2, r0
 80023ee:	4b06      	ldr	r3, [pc, #24]	; (8002408 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	0adb      	lsrs	r3, r3, #11
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	4904      	ldr	r1, [pc, #16]	; (800240c <HAL_RCC_GetPCLK2Freq+0x28>)
 80023fa:	5ccb      	ldrb	r3, [r1, r3]
 80023fc:	f003 031f 	and.w	r3, r3, #31
 8002400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002404:	4618      	mov	r0, r3
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40021000 	.word	0x40021000
 800240c:	08003f20 	.word	0x08003f20

08002410 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002418:	2300      	movs	r3, #0
 800241a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800241c:	4b2a      	ldr	r3, [pc, #168]	; (80024c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800241e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d003      	beq.n	8002430 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002428:	f7ff f9ee 	bl	8001808 <HAL_PWREx_GetVoltageRange>
 800242c:	6178      	str	r0, [r7, #20]
 800242e:	e014      	b.n	800245a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002430:	4b25      	ldr	r3, [pc, #148]	; (80024c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002434:	4a24      	ldr	r2, [pc, #144]	; (80024c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002436:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800243a:	6593      	str	r3, [r2, #88]	; 0x58
 800243c:	4b22      	ldr	r3, [pc, #136]	; (80024c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800243e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002448:	f7ff f9de 	bl	8001808 <HAL_PWREx_GetVoltageRange>
 800244c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800244e:	4b1e      	ldr	r3, [pc, #120]	; (80024c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002452:	4a1d      	ldr	r2, [pc, #116]	; (80024c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002454:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002458:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002460:	d10b      	bne.n	800247a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b80      	cmp	r3, #128	; 0x80
 8002466:	d919      	bls.n	800249c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2ba0      	cmp	r3, #160	; 0xa0
 800246c:	d902      	bls.n	8002474 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800246e:	2302      	movs	r3, #2
 8002470:	613b      	str	r3, [r7, #16]
 8002472:	e013      	b.n	800249c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002474:	2301      	movs	r3, #1
 8002476:	613b      	str	r3, [r7, #16]
 8002478:	e010      	b.n	800249c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b80      	cmp	r3, #128	; 0x80
 800247e:	d902      	bls.n	8002486 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002480:	2303      	movs	r3, #3
 8002482:	613b      	str	r3, [r7, #16]
 8002484:	e00a      	b.n	800249c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b80      	cmp	r3, #128	; 0x80
 800248a:	d102      	bne.n	8002492 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800248c:	2302      	movs	r3, #2
 800248e:	613b      	str	r3, [r7, #16]
 8002490:	e004      	b.n	800249c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b70      	cmp	r3, #112	; 0x70
 8002496:	d101      	bne.n	800249c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002498:	2301      	movs	r3, #1
 800249a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800249c:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f023 0207 	bic.w	r2, r3, #7
 80024a4:	4909      	ldr	r1, [pc, #36]	; (80024cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80024ac:	4b07      	ldr	r3, [pc, #28]	; (80024cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d001      	beq.n	80024be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e000      	b.n	80024c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40021000 	.word	0x40021000
 80024cc:	40022000 	.word	0x40022000

080024d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024d8:	2300      	movs	r3, #0
 80024da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024dc:	2300      	movs	r3, #0
 80024de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d041      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024f0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024f4:	d02a      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80024f6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024fa:	d824      	bhi.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002500:	d008      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002502:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002506:	d81e      	bhi.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00a      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800250c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002510:	d010      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002512:	e018      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002514:	4b86      	ldr	r3, [pc, #536]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	4a85      	ldr	r2, [pc, #532]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800251a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800251e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002520:	e015      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	3304      	adds	r3, #4
 8002526:	2100      	movs	r1, #0
 8002528:	4618      	mov	r0, r3
 800252a:	f000 fabb 	bl	8002aa4 <RCCEx_PLLSAI1_Config>
 800252e:	4603      	mov	r3, r0
 8002530:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002532:	e00c      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3320      	adds	r3, #32
 8002538:	2100      	movs	r1, #0
 800253a:	4618      	mov	r0, r3
 800253c:	f000 fba6 	bl	8002c8c <RCCEx_PLLSAI2_Config>
 8002540:	4603      	mov	r3, r0
 8002542:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002544:	e003      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	74fb      	strb	r3, [r7, #19]
      break;
 800254a:	e000      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800254c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800254e:	7cfb      	ldrb	r3, [r7, #19]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10b      	bne.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002554:	4b76      	ldr	r3, [pc, #472]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002562:	4973      	ldr	r1, [pc, #460]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002564:	4313      	orrs	r3, r2
 8002566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800256a:	e001      	b.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800256c:	7cfb      	ldrb	r3, [r7, #19]
 800256e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d041      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002580:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002584:	d02a      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002586:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800258a:	d824      	bhi.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800258c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002590:	d008      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002592:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002596:	d81e      	bhi.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00a      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800259c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025a0:	d010      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80025a2:	e018      	b.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025a4:	4b62      	ldr	r3, [pc, #392]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	4a61      	ldr	r2, [pc, #388]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025b0:	e015      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	3304      	adds	r3, #4
 80025b6:	2100      	movs	r1, #0
 80025b8:	4618      	mov	r0, r3
 80025ba:	f000 fa73 	bl	8002aa4 <RCCEx_PLLSAI1_Config>
 80025be:	4603      	mov	r3, r0
 80025c0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025c2:	e00c      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3320      	adds	r3, #32
 80025c8:	2100      	movs	r1, #0
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 fb5e 	bl	8002c8c <RCCEx_PLLSAI2_Config>
 80025d0:	4603      	mov	r3, r0
 80025d2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025d4:	e003      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	74fb      	strb	r3, [r7, #19]
      break;
 80025da:	e000      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80025dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025de:	7cfb      	ldrb	r3, [r7, #19]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10b      	bne.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025e4:	4b52      	ldr	r3, [pc, #328]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025f2:	494f      	ldr	r1, [pc, #316]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80025fa:	e001      	b.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025fc:	7cfb      	ldrb	r3, [r7, #19]
 80025fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 80a0 	beq.w	800274e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800260e:	2300      	movs	r3, #0
 8002610:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002612:	4b47      	ldr	r3, [pc, #284]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002622:	2300      	movs	r3, #0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00d      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002628:	4b41      	ldr	r3, [pc, #260]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800262a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262c:	4a40      	ldr	r2, [pc, #256]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800262e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002632:	6593      	str	r3, [r2, #88]	; 0x58
 8002634:	4b3e      	ldr	r3, [pc, #248]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263c:	60bb      	str	r3, [r7, #8]
 800263e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002640:	2301      	movs	r3, #1
 8002642:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002644:	4b3b      	ldr	r3, [pc, #236]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a3a      	ldr	r2, [pc, #232]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800264a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800264e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002650:	f7fe fe02 	bl	8001258 <HAL_GetTick>
 8002654:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002656:	e009      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002658:	f7fe fdfe 	bl	8001258 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d902      	bls.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	74fb      	strb	r3, [r7, #19]
        break;
 800266a:	e005      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800266c:	4b31      	ldr	r3, [pc, #196]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0ef      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002678:	7cfb      	ldrb	r3, [r7, #19]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d15c      	bne.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800267e:	4b2c      	ldr	r3, [pc, #176]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002684:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002688:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d01f      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	429a      	cmp	r2, r3
 800269a:	d019      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800269c:	4b24      	ldr	r3, [pc, #144]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800269e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026a8:	4b21      	ldr	r3, [pc, #132]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ae:	4a20      	ldr	r2, [pc, #128]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026b8:	4b1d      	ldr	r3, [pc, #116]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026be:	4a1c      	ldr	r2, [pc, #112]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026c8:	4a19      	ldr	r2, [pc, #100]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d016      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026da:	f7fe fdbd 	bl	8001258 <HAL_GetTick>
 80026de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026e0:	e00b      	b.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e2:	f7fe fdb9 	bl	8001258 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d902      	bls.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	74fb      	strb	r3, [r7, #19]
            break;
 80026f8:	e006      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026fa:	4b0d      	ldr	r3, [pc, #52]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0ec      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002708:	7cfb      	ldrb	r3, [r7, #19]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10c      	bne.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800270e:	4b08      	ldr	r3, [pc, #32]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002714:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800271e:	4904      	ldr	r1, [pc, #16]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002720:	4313      	orrs	r3, r2
 8002722:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002726:	e009      	b.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002728:	7cfb      	ldrb	r3, [r7, #19]
 800272a:	74bb      	strb	r3, [r7, #18]
 800272c:	e006      	b.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800272e:	bf00      	nop
 8002730:	40021000 	.word	0x40021000
 8002734:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002738:	7cfb      	ldrb	r3, [r7, #19]
 800273a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800273c:	7c7b      	ldrb	r3, [r7, #17]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d105      	bne.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002742:	4b9e      	ldr	r3, [pc, #632]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002746:	4a9d      	ldr	r2, [pc, #628]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002748:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800274c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00a      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800275a:	4b98      	ldr	r3, [pc, #608]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002760:	f023 0203 	bic.w	r2, r3, #3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002768:	4994      	ldr	r1, [pc, #592]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276a:	4313      	orrs	r3, r2
 800276c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00a      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800277c:	4b8f      	ldr	r3, [pc, #572]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002782:	f023 020c 	bic.w	r2, r3, #12
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800278a:	498c      	ldr	r1, [pc, #560]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278c:	4313      	orrs	r3, r2
 800278e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0304 	and.w	r3, r3, #4
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00a      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800279e:	4b87      	ldr	r3, [pc, #540]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	4983      	ldr	r1, [pc, #524]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0308 	and.w	r3, r3, #8
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00a      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027c0:	4b7e      	ldr	r3, [pc, #504]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ce:	497b      	ldr	r1, [pc, #492]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0310 	and.w	r3, r3, #16
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00a      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027e2:	4b76      	ldr	r3, [pc, #472]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f0:	4972      	ldr	r1, [pc, #456]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0320 	and.w	r3, r3, #32
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00a      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002804:	4b6d      	ldr	r3, [pc, #436]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002812:	496a      	ldr	r1, [pc, #424]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002814:	4313      	orrs	r3, r2
 8002816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00a      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002826:	4b65      	ldr	r3, [pc, #404]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002834:	4961      	ldr	r1, [pc, #388]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002836:	4313      	orrs	r3, r2
 8002838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00a      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002848:	4b5c      	ldr	r3, [pc, #368]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002856:	4959      	ldr	r1, [pc, #356]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002858:	4313      	orrs	r3, r2
 800285a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00a      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800286a:	4b54      	ldr	r3, [pc, #336]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800286c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002870:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002878:	4950      	ldr	r1, [pc, #320]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287a:	4313      	orrs	r3, r2
 800287c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00a      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800288c:	4b4b      	ldr	r3, [pc, #300]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800288e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002892:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289a:	4948      	ldr	r1, [pc, #288]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289c:	4313      	orrs	r3, r2
 800289e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00a      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028ae:	4b43      	ldr	r3, [pc, #268]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028bc:	493f      	ldr	r1, [pc, #252]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d028      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028d0:	4b3a      	ldr	r3, [pc, #232]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028de:	4937      	ldr	r1, [pc, #220]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028ee:	d106      	bne.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028f0:	4b32      	ldr	r3, [pc, #200]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	4a31      	ldr	r2, [pc, #196]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028fa:	60d3      	str	r3, [r2, #12]
 80028fc:	e011      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002902:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002906:	d10c      	bne.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3304      	adds	r3, #4
 800290c:	2101      	movs	r1, #1
 800290e:	4618      	mov	r0, r3
 8002910:	f000 f8c8 	bl	8002aa4 <RCCEx_PLLSAI1_Config>
 8002914:	4603      	mov	r3, r0
 8002916:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002918:	7cfb      	ldrb	r3, [r7, #19]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800291e:	7cfb      	ldrb	r3, [r7, #19]
 8002920:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d028      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800292e:	4b23      	ldr	r3, [pc, #140]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002934:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293c:	491f      	ldr	r1, [pc, #124]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800293e:	4313      	orrs	r3, r2
 8002940:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002948:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800294c:	d106      	bne.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800294e:	4b1b      	ldr	r3, [pc, #108]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	4a1a      	ldr	r2, [pc, #104]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002954:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002958:	60d3      	str	r3, [r2, #12]
 800295a:	e011      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002960:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002964:	d10c      	bne.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3304      	adds	r3, #4
 800296a:	2101      	movs	r1, #1
 800296c:	4618      	mov	r0, r3
 800296e:	f000 f899 	bl	8002aa4 <RCCEx_PLLSAI1_Config>
 8002972:	4603      	mov	r3, r0
 8002974:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002976:	7cfb      	ldrb	r3, [r7, #19]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800297c:	7cfb      	ldrb	r3, [r7, #19]
 800297e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d02b      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800298c:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002992:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800299a:	4908      	ldr	r1, [pc, #32]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800299c:	4313      	orrs	r3, r2
 800299e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029aa:	d109      	bne.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029ac:	4b03      	ldr	r3, [pc, #12]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	4a02      	ldr	r2, [pc, #8]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029b6:	60d3      	str	r3, [r2, #12]
 80029b8:	e014      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80029ba:	bf00      	nop
 80029bc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029c8:	d10c      	bne.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	3304      	adds	r3, #4
 80029ce:	2101      	movs	r1, #1
 80029d0:	4618      	mov	r0, r3
 80029d2:	f000 f867 	bl	8002aa4 <RCCEx_PLLSAI1_Config>
 80029d6:	4603      	mov	r3, r0
 80029d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029da:	7cfb      	ldrb	r3, [r7, #19]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80029e0:	7cfb      	ldrb	r3, [r7, #19]
 80029e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d02f      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029f0:	4b2b      	ldr	r3, [pc, #172]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029fe:	4928      	ldr	r1, [pc, #160]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a0e:	d10d      	bne.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3304      	adds	r3, #4
 8002a14:	2102      	movs	r1, #2
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 f844 	bl	8002aa4 <RCCEx_PLLSAI1_Config>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a20:	7cfb      	ldrb	r3, [r7, #19]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d014      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a26:	7cfb      	ldrb	r3, [r7, #19]
 8002a28:	74bb      	strb	r3, [r7, #18]
 8002a2a:	e011      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a34:	d10c      	bne.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	3320      	adds	r3, #32
 8002a3a:	2102      	movs	r1, #2
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f000 f925 	bl	8002c8c <RCCEx_PLLSAI2_Config>
 8002a42:	4603      	mov	r3, r0
 8002a44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a46:	7cfb      	ldrb	r3, [r7, #19]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a4c:	7cfb      	ldrb	r3, [r7, #19]
 8002a4e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00a      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a5c:	4b10      	ldr	r3, [pc, #64]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a62:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a6a:	490d      	ldr	r1, [pc, #52]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00b      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a7e:	4b08      	ldr	r3, [pc, #32]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a84:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a8e:	4904      	ldr	r1, [pc, #16]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a96:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40021000 	.word	0x40021000

08002aa4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ab2:	4b75      	ldr	r3, [pc, #468]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d018      	beq.n	8002af0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002abe:	4b72      	ldr	r3, [pc, #456]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	f003 0203 	and.w	r2, r3, #3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d10d      	bne.n	8002aea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
       ||
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d009      	beq.n	8002aea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002ad6:	4b6c      	ldr	r3, [pc, #432]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	091b      	lsrs	r3, r3, #4
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	1c5a      	adds	r2, r3, #1
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
       ||
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d047      	beq.n	8002b7a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	73fb      	strb	r3, [r7, #15]
 8002aee:	e044      	b.n	8002b7a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b03      	cmp	r3, #3
 8002af6:	d018      	beq.n	8002b2a <RCCEx_PLLSAI1_Config+0x86>
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	d825      	bhi.n	8002b48 <RCCEx_PLLSAI1_Config+0xa4>
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d002      	beq.n	8002b06 <RCCEx_PLLSAI1_Config+0x62>
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d009      	beq.n	8002b18 <RCCEx_PLLSAI1_Config+0x74>
 8002b04:	e020      	b.n	8002b48 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b06:	4b60      	ldr	r3, [pc, #384]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d11d      	bne.n	8002b4e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b16:	e01a      	b.n	8002b4e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b18:	4b5b      	ldr	r3, [pc, #364]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d116      	bne.n	8002b52 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b28:	e013      	b.n	8002b52 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b2a:	4b57      	ldr	r3, [pc, #348]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10f      	bne.n	8002b56 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b36:	4b54      	ldr	r3, [pc, #336]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d109      	bne.n	8002b56 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b46:	e006      	b.n	8002b56 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b4c:	e004      	b.n	8002b58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b4e:	bf00      	nop
 8002b50:	e002      	b.n	8002b58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b52:	bf00      	nop
 8002b54:	e000      	b.n	8002b58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b56:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10d      	bne.n	8002b7a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b5e:	4b4a      	ldr	r3, [pc, #296]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6819      	ldr	r1, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	011b      	lsls	r3, r3, #4
 8002b72:	430b      	orrs	r3, r1
 8002b74:	4944      	ldr	r1, [pc, #272]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b7a:	7bfb      	ldrb	r3, [r7, #15]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d17d      	bne.n	8002c7c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b80:	4b41      	ldr	r3, [pc, #260]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a40      	ldr	r2, [pc, #256]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b8c:	f7fe fb64 	bl	8001258 <HAL_GetTick>
 8002b90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b92:	e009      	b.n	8002ba8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b94:	f7fe fb60 	bl	8001258 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d902      	bls.n	8002ba8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	73fb      	strb	r3, [r7, #15]
        break;
 8002ba6:	e005      	b.n	8002bb4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ba8:	4b37      	ldr	r3, [pc, #220]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1ef      	bne.n	8002b94 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d160      	bne.n	8002c7c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d111      	bne.n	8002be4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bc0:	4b31      	ldr	r3, [pc, #196]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002bc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6892      	ldr	r2, [r2, #8]
 8002bd0:	0211      	lsls	r1, r2, #8
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	68d2      	ldr	r2, [r2, #12]
 8002bd6:	0912      	lsrs	r2, r2, #4
 8002bd8:	0452      	lsls	r2, r2, #17
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	492a      	ldr	r1, [pc, #168]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	610b      	str	r3, [r1, #16]
 8002be2:	e027      	b.n	8002c34 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d112      	bne.n	8002c10 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bea:	4b27      	ldr	r3, [pc, #156]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002bf2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6892      	ldr	r2, [r2, #8]
 8002bfa:	0211      	lsls	r1, r2, #8
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6912      	ldr	r2, [r2, #16]
 8002c00:	0852      	lsrs	r2, r2, #1
 8002c02:	3a01      	subs	r2, #1
 8002c04:	0552      	lsls	r2, r2, #21
 8002c06:	430a      	orrs	r2, r1
 8002c08:	491f      	ldr	r1, [pc, #124]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	610b      	str	r3, [r1, #16]
 8002c0e:	e011      	b.n	8002c34 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c10:	4b1d      	ldr	r3, [pc, #116]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c18:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6892      	ldr	r2, [r2, #8]
 8002c20:	0211      	lsls	r1, r2, #8
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6952      	ldr	r2, [r2, #20]
 8002c26:	0852      	lsrs	r2, r2, #1
 8002c28:	3a01      	subs	r2, #1
 8002c2a:	0652      	lsls	r2, r2, #25
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	4916      	ldr	r1, [pc, #88]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c34:	4b14      	ldr	r3, [pc, #80]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a13      	ldr	r2, [pc, #76]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c3e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c40:	f7fe fb0a 	bl	8001258 <HAL_GetTick>
 8002c44:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c46:	e009      	b.n	8002c5c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c48:	f7fe fb06 	bl	8001258 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d902      	bls.n	8002c5c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	73fb      	strb	r3, [r7, #15]
          break;
 8002c5a:	e005      	b.n	8002c68 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c5c:	4b0a      	ldr	r3, [pc, #40]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0ef      	beq.n	8002c48 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d106      	bne.n	8002c7c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c6e:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c70:	691a      	ldr	r2, [r3, #16]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	4904      	ldr	r1, [pc, #16]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	40021000 	.word	0x40021000

08002c8c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c9a:	4b6a      	ldr	r3, [pc, #424]	; (8002e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	f003 0303 	and.w	r3, r3, #3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d018      	beq.n	8002cd8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002ca6:	4b67      	ldr	r3, [pc, #412]	; (8002e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	f003 0203 	and.w	r2, r3, #3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d10d      	bne.n	8002cd2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
       ||
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d009      	beq.n	8002cd2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002cbe:	4b61      	ldr	r3, [pc, #388]	; (8002e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	091b      	lsrs	r3, r3, #4
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
       ||
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d047      	beq.n	8002d62 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	73fb      	strb	r3, [r7, #15]
 8002cd6:	e044      	b.n	8002d62 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d018      	beq.n	8002d12 <RCCEx_PLLSAI2_Config+0x86>
 8002ce0:	2b03      	cmp	r3, #3
 8002ce2:	d825      	bhi.n	8002d30 <RCCEx_PLLSAI2_Config+0xa4>
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d002      	beq.n	8002cee <RCCEx_PLLSAI2_Config+0x62>
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d009      	beq.n	8002d00 <RCCEx_PLLSAI2_Config+0x74>
 8002cec:	e020      	b.n	8002d30 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cee:	4b55      	ldr	r3, [pc, #340]	; (8002e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d11d      	bne.n	8002d36 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cfe:	e01a      	b.n	8002d36 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d00:	4b50      	ldr	r3, [pc, #320]	; (8002e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d116      	bne.n	8002d3a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d10:	e013      	b.n	8002d3a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d12:	4b4c      	ldr	r3, [pc, #304]	; (8002e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10f      	bne.n	8002d3e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d1e:	4b49      	ldr	r3, [pc, #292]	; (8002e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d109      	bne.n	8002d3e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d2e:	e006      	b.n	8002d3e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	73fb      	strb	r3, [r7, #15]
      break;
 8002d34:	e004      	b.n	8002d40 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d36:	bf00      	nop
 8002d38:	e002      	b.n	8002d40 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d3a:	bf00      	nop
 8002d3c:	e000      	b.n	8002d40 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10d      	bne.n	8002d62 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d46:	4b3f      	ldr	r3, [pc, #252]	; (8002e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6819      	ldr	r1, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	3b01      	subs	r3, #1
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	430b      	orrs	r3, r1
 8002d5c:	4939      	ldr	r1, [pc, #228]	; (8002e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d167      	bne.n	8002e38 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d68:	4b36      	ldr	r3, [pc, #216]	; (8002e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a35      	ldr	r2, [pc, #212]	; (8002e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d74:	f7fe fa70 	bl	8001258 <HAL_GetTick>
 8002d78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d7a:	e009      	b.n	8002d90 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d7c:	f7fe fa6c 	bl	8001258 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d902      	bls.n	8002d90 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	73fb      	strb	r3, [r7, #15]
        break;
 8002d8e:	e005      	b.n	8002d9c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d90:	4b2c      	ldr	r3, [pc, #176]	; (8002e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1ef      	bne.n	8002d7c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d14a      	bne.n	8002e38 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d111      	bne.n	8002dcc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002da8:	4b26      	ldr	r3, [pc, #152]	; (8002e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6892      	ldr	r2, [r2, #8]
 8002db8:	0211      	lsls	r1, r2, #8
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	68d2      	ldr	r2, [r2, #12]
 8002dbe:	0912      	lsrs	r2, r2, #4
 8002dc0:	0452      	lsls	r2, r2, #17
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	491f      	ldr	r1, [pc, #124]	; (8002e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	614b      	str	r3, [r1, #20]
 8002dca:	e011      	b.n	8002df0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002dcc:	4b1d      	ldr	r3, [pc, #116]	; (8002e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002dd4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6892      	ldr	r2, [r2, #8]
 8002ddc:	0211      	lsls	r1, r2, #8
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6912      	ldr	r2, [r2, #16]
 8002de2:	0852      	lsrs	r2, r2, #1
 8002de4:	3a01      	subs	r2, #1
 8002de6:	0652      	lsls	r2, r2, #25
 8002de8:	430a      	orrs	r2, r1
 8002dea:	4916      	ldr	r1, [pc, #88]	; (8002e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002df0:	4b14      	ldr	r3, [pc, #80]	; (8002e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a13      	ldr	r2, [pc, #76]	; (8002e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dfa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfc:	f7fe fa2c 	bl	8001258 <HAL_GetTick>
 8002e00:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e02:	e009      	b.n	8002e18 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e04:	f7fe fa28 	bl	8001258 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d902      	bls.n	8002e18 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	73fb      	strb	r3, [r7, #15]
          break;
 8002e16:	e005      	b.n	8002e24 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e18:	4b0a      	ldr	r3, [pc, #40]	; (8002e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0ef      	beq.n	8002e04 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d106      	bne.n	8002e38 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002e2a:	4b06      	ldr	r3, [pc, #24]	; (8002e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e2c:	695a      	ldr	r2, [r3, #20]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	4904      	ldr	r1, [pc, #16]	; (8002e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	40021000 	.word	0x40021000

08002e48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e095      	b.n	8002f86 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d108      	bne.n	8002e74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e6a:	d009      	beq.n	8002e80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	61da      	str	r2, [r3, #28]
 8002e72:	e005      	b.n	8002e80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d106      	bne.n	8002ea0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7fd fc66 	bl	800076c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eb6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ec0:	d902      	bls.n	8002ec8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	e002      	b.n	8002ece <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002ec8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ecc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002ed6:	d007      	beq.n	8002ee8 <HAL_SPI_Init+0xa0>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ee0:	d002      	beq.n	8002ee8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	431a      	orrs	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f20:	431a      	orrs	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f2a:	ea42 0103 	orr.w	r1, r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f32:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	0c1b      	lsrs	r3, r3, #16
 8002f44:	f003 0204 	and.w	r2, r3, #4
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	f003 0310 	and.w	r3, r3, #16
 8002f50:	431a      	orrs	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f56:	f003 0308 	and.w	r3, r3, #8
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002f64:	ea42 0103 	orr.w	r1, r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b088      	sub	sp, #32
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	60f8      	str	r0, [r7, #12]
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	603b      	str	r3, [r7, #0]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d101      	bne.n	8002fb0 <HAL_SPI_Transmit+0x22>
 8002fac:	2302      	movs	r3, #2
 8002fae:	e158      	b.n	8003262 <HAL_SPI_Transmit+0x2d4>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fb8:	f7fe f94e 	bl	8001258 <HAL_GetTick>
 8002fbc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002fbe:	88fb      	ldrh	r3, [r7, #6]
 8002fc0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d002      	beq.n	8002fd4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002fce:	2302      	movs	r3, #2
 8002fd0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002fd2:	e13d      	b.n	8003250 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d002      	beq.n	8002fe0 <HAL_SPI_Transmit+0x52>
 8002fda:	88fb      	ldrh	r3, [r7, #6]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d102      	bne.n	8002fe6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002fe4:	e134      	b.n	8003250 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2203      	movs	r2, #3
 8002fea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	88fa      	ldrh	r2, [r7, #6]
 8002ffe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	88fa      	ldrh	r2, [r7, #6]
 8003004:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003030:	d10f      	bne.n	8003052 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003040:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003050:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305c:	2b40      	cmp	r3, #64	; 0x40
 800305e:	d007      	beq.n	8003070 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800306e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003078:	d94b      	bls.n	8003112 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d002      	beq.n	8003088 <HAL_SPI_Transmit+0xfa>
 8003082:	8afb      	ldrh	r3, [r7, #22]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d13e      	bne.n	8003106 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308c:	881a      	ldrh	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003098:	1c9a      	adds	r2, r3, #2
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	3b01      	subs	r3, #1
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80030ac:	e02b      	b.n	8003106 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d112      	bne.n	80030e2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c0:	881a      	ldrh	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030cc:	1c9a      	adds	r2, r3, #2
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	3b01      	subs	r3, #1
 80030da:	b29a      	uxth	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030e0:	e011      	b.n	8003106 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030e2:	f7fe f8b9 	bl	8001258 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d803      	bhi.n	80030fa <HAL_SPI_Transmit+0x16c>
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f8:	d102      	bne.n	8003100 <HAL_SPI_Transmit+0x172>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d102      	bne.n	8003106 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003104:	e0a4      	b.n	8003250 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800310a:	b29b      	uxth	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1ce      	bne.n	80030ae <HAL_SPI_Transmit+0x120>
 8003110:	e07c      	b.n	800320c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d002      	beq.n	8003120 <HAL_SPI_Transmit+0x192>
 800311a:	8afb      	ldrh	r3, [r7, #22]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d170      	bne.n	8003202 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003124:	b29b      	uxth	r3, r3
 8003126:	2b01      	cmp	r3, #1
 8003128:	d912      	bls.n	8003150 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312e:	881a      	ldrh	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313a:	1c9a      	adds	r2, r3, #2
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003144:	b29b      	uxth	r3, r3
 8003146:	3b02      	subs	r3, #2
 8003148:	b29a      	uxth	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800314e:	e058      	b.n	8003202 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	330c      	adds	r3, #12
 800315a:	7812      	ldrb	r2, [r2, #0]
 800315c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003162:	1c5a      	adds	r2, r3, #1
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800316c:	b29b      	uxth	r3, r3
 800316e:	3b01      	subs	r3, #1
 8003170:	b29a      	uxth	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003176:	e044      	b.n	8003202 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b02      	cmp	r3, #2
 8003184:	d12b      	bne.n	80031de <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800318a:	b29b      	uxth	r3, r3
 800318c:	2b01      	cmp	r3, #1
 800318e:	d912      	bls.n	80031b6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003194:	881a      	ldrh	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a0:	1c9a      	adds	r2, r3, #2
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	3b02      	subs	r3, #2
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031b4:	e025      	b.n	8003202 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	330c      	adds	r3, #12
 80031c0:	7812      	ldrb	r2, [r2, #0]
 80031c2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031dc:	e011      	b.n	8003202 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031de:	f7fe f83b 	bl	8001258 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d803      	bhi.n	80031f6 <HAL_SPI_Transmit+0x268>
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f4:	d102      	bne.n	80031fc <HAL_SPI_Transmit+0x26e>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d102      	bne.n	8003202 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003200:	e026      	b.n	8003250 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003206:	b29b      	uxth	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1b5      	bne.n	8003178 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	6839      	ldr	r1, [r7, #0]
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f000 f949 	bl	80034a8 <SPI_EndRxTxTransaction>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d002      	beq.n	8003222 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2220      	movs	r2, #32
 8003220:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10a      	bne.n	8003240 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800322a:	2300      	movs	r3, #0
 800322c:	613b      	str	r3, [r7, #16]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	613b      	str	r3, [r7, #16]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	613b      	str	r3, [r7, #16]
 800323e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003244:	2b00      	cmp	r3, #0
 8003246:	d002      	beq.n	800324e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	77fb      	strb	r3, [r7, #31]
 800324c:	e000      	b.n	8003250 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800324e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003260:	7ffb      	ldrb	r3, [r7, #31]
}
 8003262:	4618      	mov	r0, r3
 8003264:	3720      	adds	r7, #32
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
	...

0800326c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b088      	sub	sp, #32
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	603b      	str	r3, [r7, #0]
 8003278:	4613      	mov	r3, r2
 800327a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800327c:	f7fd ffec 	bl	8001258 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003284:	1a9b      	subs	r3, r3, r2
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	4413      	add	r3, r2
 800328a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800328c:	f7fd ffe4 	bl	8001258 <HAL_GetTick>
 8003290:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003292:	4b39      	ldr	r3, [pc, #228]	; (8003378 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	015b      	lsls	r3, r3, #5
 8003298:	0d1b      	lsrs	r3, r3, #20
 800329a:	69fa      	ldr	r2, [r7, #28]
 800329c:	fb02 f303 	mul.w	r3, r2, r3
 80032a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032a2:	e054      	b.n	800334e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032aa:	d050      	beq.n	800334e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032ac:	f7fd ffd4 	bl	8001258 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	69fa      	ldr	r2, [r7, #28]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d902      	bls.n	80032c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d13d      	bne.n	800333e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80032d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032da:	d111      	bne.n	8003300 <SPI_WaitFlagStateUntilTimeout+0x94>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032e4:	d004      	beq.n	80032f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ee:	d107      	bne.n	8003300 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003304:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003308:	d10f      	bne.n	800332a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003328:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e017      	b.n	800336e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003344:	2300      	movs	r3, #0
 8003346:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	3b01      	subs	r3, #1
 800334c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	4013      	ands	r3, r2
 8003358:	68ba      	ldr	r2, [r7, #8]
 800335a:	429a      	cmp	r2, r3
 800335c:	bf0c      	ite	eq
 800335e:	2301      	moveq	r3, #1
 8003360:	2300      	movne	r3, #0
 8003362:	b2db      	uxtb	r3, r3
 8003364:	461a      	mov	r2, r3
 8003366:	79fb      	ldrb	r3, [r7, #7]
 8003368:	429a      	cmp	r2, r3
 800336a:	d19b      	bne.n	80032a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3720      	adds	r7, #32
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	20002520 	.word	0x20002520

0800337c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b08a      	sub	sp, #40	; 0x28
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
 8003388:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800338a:	2300      	movs	r3, #0
 800338c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800338e:	f7fd ff63 	bl	8001258 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003396:	1a9b      	subs	r3, r3, r2
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	4413      	add	r3, r2
 800339c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800339e:	f7fd ff5b 	bl	8001258 <HAL_GetTick>
 80033a2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	330c      	adds	r3, #12
 80033aa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80033ac:	4b3d      	ldr	r3, [pc, #244]	; (80034a4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	4613      	mov	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	00da      	lsls	r2, r3, #3
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	0d1b      	lsrs	r3, r3, #20
 80033bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033be:	fb02 f303 	mul.w	r3, r2, r3
 80033c2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80033c4:	e060      	b.n	8003488 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80033cc:	d107      	bne.n	80033de <SPI_WaitFifoStateUntilTimeout+0x62>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d104      	bne.n	80033de <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80033dc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e4:	d050      	beq.n	8003488 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033e6:	f7fd ff37 	bl	8001258 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d902      	bls.n	80033fc <SPI_WaitFifoStateUntilTimeout+0x80>
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d13d      	bne.n	8003478 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800340a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003414:	d111      	bne.n	800343a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800341e:	d004      	beq.n	800342a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003428:	d107      	bne.n	800343a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003438:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003442:	d10f      	bne.n	8003464 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003462:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e010      	b.n	800349a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800347e:	2300      	movs	r3, #0
 8003480:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	3b01      	subs	r3, #1
 8003486:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689a      	ldr	r2, [r3, #8]
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	4013      	ands	r3, r2
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	429a      	cmp	r2, r3
 8003496:	d196      	bne.n	80033c6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3728      	adds	r7, #40	; 0x28
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20002520 	.word	0x20002520

080034a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af02      	add	r7, sp, #8
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f7ff ff5b 	bl	800337c <SPI_WaitFifoStateUntilTimeout>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d007      	beq.n	80034dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034d0:	f043 0220 	orr.w	r2, r3, #32
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e027      	b.n	800352c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	2200      	movs	r2, #0
 80034e4:	2180      	movs	r1, #128	; 0x80
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f7ff fec0 	bl	800326c <SPI_WaitFlagStateUntilTimeout>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d007      	beq.n	8003502 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034f6:	f043 0220 	orr.w	r2, r3, #32
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e014      	b.n	800352c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	2200      	movs	r2, #0
 800350a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f7ff ff34 	bl	800337c <SPI_WaitFifoStateUntilTimeout>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d007      	beq.n	800352a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800351e:	f043 0220 	orr.w	r2, r3, #32
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e000      	b.n	800352c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e040      	b.n	80035c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800354a:	2b00      	cmp	r3, #0
 800354c:	d106      	bne.n	800355c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7fd fd88 	bl	800106c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2224      	movs	r2, #36	; 0x24
 8003560:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 0201 	bic.w	r2, r2, #1
 8003570:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f82c 	bl	80035d0 <UART_SetConfig>
 8003578:	4603      	mov	r3, r0
 800357a:	2b01      	cmp	r3, #1
 800357c:	d101      	bne.n	8003582 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e022      	b.n	80035c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003586:	2b00      	cmp	r3, #0
 8003588:	d002      	beq.n	8003590 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 fad8 	bl	8003b40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800359e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689a      	ldr	r2, [r3, #8]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 0201 	orr.w	r2, r2, #1
 80035be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 fb5f 	bl	8003c84 <UART_CheckIdleState>
 80035c6:	4603      	mov	r3, r0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035d4:	b08a      	sub	sp, #40	; 0x28
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035da:	2300      	movs	r3, #0
 80035dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	431a      	orrs	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	431a      	orrs	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	69db      	ldr	r3, [r3, #28]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	4ba4      	ldr	r3, [pc, #656]	; (8003890 <UART_SetConfig+0x2c0>)
 8003600:	4013      	ands	r3, r2
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	6812      	ldr	r2, [r2, #0]
 8003606:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003608:	430b      	orrs	r3, r1
 800360a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	430a      	orrs	r2, r1
 8003620:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a99      	ldr	r2, [pc, #612]	; (8003894 <UART_SetConfig+0x2c4>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d004      	beq.n	800363c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003638:	4313      	orrs	r3, r2
 800363a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800364c:	430a      	orrs	r2, r1
 800364e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a90      	ldr	r2, [pc, #576]	; (8003898 <UART_SetConfig+0x2c8>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d126      	bne.n	80036a8 <UART_SetConfig+0xd8>
 800365a:	4b90      	ldr	r3, [pc, #576]	; (800389c <UART_SetConfig+0x2cc>)
 800365c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003660:	f003 0303 	and.w	r3, r3, #3
 8003664:	2b03      	cmp	r3, #3
 8003666:	d81b      	bhi.n	80036a0 <UART_SetConfig+0xd0>
 8003668:	a201      	add	r2, pc, #4	; (adr r2, 8003670 <UART_SetConfig+0xa0>)
 800366a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366e:	bf00      	nop
 8003670:	08003681 	.word	0x08003681
 8003674:	08003691 	.word	0x08003691
 8003678:	08003689 	.word	0x08003689
 800367c:	08003699 	.word	0x08003699
 8003680:	2301      	movs	r3, #1
 8003682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003686:	e116      	b.n	80038b6 <UART_SetConfig+0x2e6>
 8003688:	2302      	movs	r3, #2
 800368a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800368e:	e112      	b.n	80038b6 <UART_SetConfig+0x2e6>
 8003690:	2304      	movs	r3, #4
 8003692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003696:	e10e      	b.n	80038b6 <UART_SetConfig+0x2e6>
 8003698:	2308      	movs	r3, #8
 800369a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800369e:	e10a      	b.n	80038b6 <UART_SetConfig+0x2e6>
 80036a0:	2310      	movs	r3, #16
 80036a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036a6:	e106      	b.n	80038b6 <UART_SetConfig+0x2e6>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a7c      	ldr	r2, [pc, #496]	; (80038a0 <UART_SetConfig+0x2d0>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d138      	bne.n	8003724 <UART_SetConfig+0x154>
 80036b2:	4b7a      	ldr	r3, [pc, #488]	; (800389c <UART_SetConfig+0x2cc>)
 80036b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b8:	f003 030c 	and.w	r3, r3, #12
 80036bc:	2b0c      	cmp	r3, #12
 80036be:	d82d      	bhi.n	800371c <UART_SetConfig+0x14c>
 80036c0:	a201      	add	r2, pc, #4	; (adr r2, 80036c8 <UART_SetConfig+0xf8>)
 80036c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c6:	bf00      	nop
 80036c8:	080036fd 	.word	0x080036fd
 80036cc:	0800371d 	.word	0x0800371d
 80036d0:	0800371d 	.word	0x0800371d
 80036d4:	0800371d 	.word	0x0800371d
 80036d8:	0800370d 	.word	0x0800370d
 80036dc:	0800371d 	.word	0x0800371d
 80036e0:	0800371d 	.word	0x0800371d
 80036e4:	0800371d 	.word	0x0800371d
 80036e8:	08003705 	.word	0x08003705
 80036ec:	0800371d 	.word	0x0800371d
 80036f0:	0800371d 	.word	0x0800371d
 80036f4:	0800371d 	.word	0x0800371d
 80036f8:	08003715 	.word	0x08003715
 80036fc:	2300      	movs	r3, #0
 80036fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003702:	e0d8      	b.n	80038b6 <UART_SetConfig+0x2e6>
 8003704:	2302      	movs	r3, #2
 8003706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800370a:	e0d4      	b.n	80038b6 <UART_SetConfig+0x2e6>
 800370c:	2304      	movs	r3, #4
 800370e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003712:	e0d0      	b.n	80038b6 <UART_SetConfig+0x2e6>
 8003714:	2308      	movs	r3, #8
 8003716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800371a:	e0cc      	b.n	80038b6 <UART_SetConfig+0x2e6>
 800371c:	2310      	movs	r3, #16
 800371e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003722:	e0c8      	b.n	80038b6 <UART_SetConfig+0x2e6>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a5e      	ldr	r2, [pc, #376]	; (80038a4 <UART_SetConfig+0x2d4>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d125      	bne.n	800377a <UART_SetConfig+0x1aa>
 800372e:	4b5b      	ldr	r3, [pc, #364]	; (800389c <UART_SetConfig+0x2cc>)
 8003730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003734:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003738:	2b30      	cmp	r3, #48	; 0x30
 800373a:	d016      	beq.n	800376a <UART_SetConfig+0x19a>
 800373c:	2b30      	cmp	r3, #48	; 0x30
 800373e:	d818      	bhi.n	8003772 <UART_SetConfig+0x1a2>
 8003740:	2b20      	cmp	r3, #32
 8003742:	d00a      	beq.n	800375a <UART_SetConfig+0x18a>
 8003744:	2b20      	cmp	r3, #32
 8003746:	d814      	bhi.n	8003772 <UART_SetConfig+0x1a2>
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <UART_SetConfig+0x182>
 800374c:	2b10      	cmp	r3, #16
 800374e:	d008      	beq.n	8003762 <UART_SetConfig+0x192>
 8003750:	e00f      	b.n	8003772 <UART_SetConfig+0x1a2>
 8003752:	2300      	movs	r3, #0
 8003754:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003758:	e0ad      	b.n	80038b6 <UART_SetConfig+0x2e6>
 800375a:	2302      	movs	r3, #2
 800375c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003760:	e0a9      	b.n	80038b6 <UART_SetConfig+0x2e6>
 8003762:	2304      	movs	r3, #4
 8003764:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003768:	e0a5      	b.n	80038b6 <UART_SetConfig+0x2e6>
 800376a:	2308      	movs	r3, #8
 800376c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003770:	e0a1      	b.n	80038b6 <UART_SetConfig+0x2e6>
 8003772:	2310      	movs	r3, #16
 8003774:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003778:	e09d      	b.n	80038b6 <UART_SetConfig+0x2e6>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a4a      	ldr	r2, [pc, #296]	; (80038a8 <UART_SetConfig+0x2d8>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d125      	bne.n	80037d0 <UART_SetConfig+0x200>
 8003784:	4b45      	ldr	r3, [pc, #276]	; (800389c <UART_SetConfig+0x2cc>)
 8003786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800378e:	2bc0      	cmp	r3, #192	; 0xc0
 8003790:	d016      	beq.n	80037c0 <UART_SetConfig+0x1f0>
 8003792:	2bc0      	cmp	r3, #192	; 0xc0
 8003794:	d818      	bhi.n	80037c8 <UART_SetConfig+0x1f8>
 8003796:	2b80      	cmp	r3, #128	; 0x80
 8003798:	d00a      	beq.n	80037b0 <UART_SetConfig+0x1e0>
 800379a:	2b80      	cmp	r3, #128	; 0x80
 800379c:	d814      	bhi.n	80037c8 <UART_SetConfig+0x1f8>
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d002      	beq.n	80037a8 <UART_SetConfig+0x1d8>
 80037a2:	2b40      	cmp	r3, #64	; 0x40
 80037a4:	d008      	beq.n	80037b8 <UART_SetConfig+0x1e8>
 80037a6:	e00f      	b.n	80037c8 <UART_SetConfig+0x1f8>
 80037a8:	2300      	movs	r3, #0
 80037aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ae:	e082      	b.n	80038b6 <UART_SetConfig+0x2e6>
 80037b0:	2302      	movs	r3, #2
 80037b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037b6:	e07e      	b.n	80038b6 <UART_SetConfig+0x2e6>
 80037b8:	2304      	movs	r3, #4
 80037ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037be:	e07a      	b.n	80038b6 <UART_SetConfig+0x2e6>
 80037c0:	2308      	movs	r3, #8
 80037c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037c6:	e076      	b.n	80038b6 <UART_SetConfig+0x2e6>
 80037c8:	2310      	movs	r3, #16
 80037ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ce:	e072      	b.n	80038b6 <UART_SetConfig+0x2e6>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a35      	ldr	r2, [pc, #212]	; (80038ac <UART_SetConfig+0x2dc>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d12a      	bne.n	8003830 <UART_SetConfig+0x260>
 80037da:	4b30      	ldr	r3, [pc, #192]	; (800389c <UART_SetConfig+0x2cc>)
 80037dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037e8:	d01a      	beq.n	8003820 <UART_SetConfig+0x250>
 80037ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037ee:	d81b      	bhi.n	8003828 <UART_SetConfig+0x258>
 80037f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037f4:	d00c      	beq.n	8003810 <UART_SetConfig+0x240>
 80037f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037fa:	d815      	bhi.n	8003828 <UART_SetConfig+0x258>
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d003      	beq.n	8003808 <UART_SetConfig+0x238>
 8003800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003804:	d008      	beq.n	8003818 <UART_SetConfig+0x248>
 8003806:	e00f      	b.n	8003828 <UART_SetConfig+0x258>
 8003808:	2300      	movs	r3, #0
 800380a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800380e:	e052      	b.n	80038b6 <UART_SetConfig+0x2e6>
 8003810:	2302      	movs	r3, #2
 8003812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003816:	e04e      	b.n	80038b6 <UART_SetConfig+0x2e6>
 8003818:	2304      	movs	r3, #4
 800381a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800381e:	e04a      	b.n	80038b6 <UART_SetConfig+0x2e6>
 8003820:	2308      	movs	r3, #8
 8003822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003826:	e046      	b.n	80038b6 <UART_SetConfig+0x2e6>
 8003828:	2310      	movs	r3, #16
 800382a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800382e:	e042      	b.n	80038b6 <UART_SetConfig+0x2e6>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a17      	ldr	r2, [pc, #92]	; (8003894 <UART_SetConfig+0x2c4>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d13a      	bne.n	80038b0 <UART_SetConfig+0x2e0>
 800383a:	4b18      	ldr	r3, [pc, #96]	; (800389c <UART_SetConfig+0x2cc>)
 800383c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003840:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003844:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003848:	d01a      	beq.n	8003880 <UART_SetConfig+0x2b0>
 800384a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800384e:	d81b      	bhi.n	8003888 <UART_SetConfig+0x2b8>
 8003850:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003854:	d00c      	beq.n	8003870 <UART_SetConfig+0x2a0>
 8003856:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800385a:	d815      	bhi.n	8003888 <UART_SetConfig+0x2b8>
 800385c:	2b00      	cmp	r3, #0
 800385e:	d003      	beq.n	8003868 <UART_SetConfig+0x298>
 8003860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003864:	d008      	beq.n	8003878 <UART_SetConfig+0x2a8>
 8003866:	e00f      	b.n	8003888 <UART_SetConfig+0x2b8>
 8003868:	2300      	movs	r3, #0
 800386a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800386e:	e022      	b.n	80038b6 <UART_SetConfig+0x2e6>
 8003870:	2302      	movs	r3, #2
 8003872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003876:	e01e      	b.n	80038b6 <UART_SetConfig+0x2e6>
 8003878:	2304      	movs	r3, #4
 800387a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800387e:	e01a      	b.n	80038b6 <UART_SetConfig+0x2e6>
 8003880:	2308      	movs	r3, #8
 8003882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003886:	e016      	b.n	80038b6 <UART_SetConfig+0x2e6>
 8003888:	2310      	movs	r3, #16
 800388a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800388e:	e012      	b.n	80038b6 <UART_SetConfig+0x2e6>
 8003890:	efff69f3 	.word	0xefff69f3
 8003894:	40008000 	.word	0x40008000
 8003898:	40013800 	.word	0x40013800
 800389c:	40021000 	.word	0x40021000
 80038a0:	40004400 	.word	0x40004400
 80038a4:	40004800 	.word	0x40004800
 80038a8:	40004c00 	.word	0x40004c00
 80038ac:	40005000 	.word	0x40005000
 80038b0:	2310      	movs	r3, #16
 80038b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a9f      	ldr	r2, [pc, #636]	; (8003b38 <UART_SetConfig+0x568>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d17a      	bne.n	80039b6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80038c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038c4:	2b08      	cmp	r3, #8
 80038c6:	d824      	bhi.n	8003912 <UART_SetConfig+0x342>
 80038c8:	a201      	add	r2, pc, #4	; (adr r2, 80038d0 <UART_SetConfig+0x300>)
 80038ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ce:	bf00      	nop
 80038d0:	080038f5 	.word	0x080038f5
 80038d4:	08003913 	.word	0x08003913
 80038d8:	080038fd 	.word	0x080038fd
 80038dc:	08003913 	.word	0x08003913
 80038e0:	08003903 	.word	0x08003903
 80038e4:	08003913 	.word	0x08003913
 80038e8:	08003913 	.word	0x08003913
 80038ec:	08003913 	.word	0x08003913
 80038f0:	0800390b 	.word	0x0800390b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038f4:	f7fe fd60 	bl	80023b8 <HAL_RCC_GetPCLK1Freq>
 80038f8:	61f8      	str	r0, [r7, #28]
        break;
 80038fa:	e010      	b.n	800391e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038fc:	4b8f      	ldr	r3, [pc, #572]	; (8003b3c <UART_SetConfig+0x56c>)
 80038fe:	61fb      	str	r3, [r7, #28]
        break;
 8003900:	e00d      	b.n	800391e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003902:	f7fe fcc1 	bl	8002288 <HAL_RCC_GetSysClockFreq>
 8003906:	61f8      	str	r0, [r7, #28]
        break;
 8003908:	e009      	b.n	800391e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800390a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800390e:	61fb      	str	r3, [r7, #28]
        break;
 8003910:	e005      	b.n	800391e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003912:	2300      	movs	r3, #0
 8003914:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800391c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 80fb 	beq.w	8003b1c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	4613      	mov	r3, r2
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	4413      	add	r3, r2
 8003930:	69fa      	ldr	r2, [r7, #28]
 8003932:	429a      	cmp	r2, r3
 8003934:	d305      	bcc.n	8003942 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800393c:	69fa      	ldr	r2, [r7, #28]
 800393e:	429a      	cmp	r2, r3
 8003940:	d903      	bls.n	800394a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003948:	e0e8      	b.n	8003b1c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	2200      	movs	r2, #0
 800394e:	461c      	mov	r4, r3
 8003950:	4615      	mov	r5, r2
 8003952:	f04f 0200 	mov.w	r2, #0
 8003956:	f04f 0300 	mov.w	r3, #0
 800395a:	022b      	lsls	r3, r5, #8
 800395c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003960:	0222      	lsls	r2, r4, #8
 8003962:	68f9      	ldr	r1, [r7, #12]
 8003964:	6849      	ldr	r1, [r1, #4]
 8003966:	0849      	lsrs	r1, r1, #1
 8003968:	2000      	movs	r0, #0
 800396a:	4688      	mov	r8, r1
 800396c:	4681      	mov	r9, r0
 800396e:	eb12 0a08 	adds.w	sl, r2, r8
 8003972:	eb43 0b09 	adc.w	fp, r3, r9
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	603b      	str	r3, [r7, #0]
 800397e:	607a      	str	r2, [r7, #4]
 8003980:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003984:	4650      	mov	r0, sl
 8003986:	4659      	mov	r1, fp
 8003988:	f7fc fc1e 	bl	80001c8 <__aeabi_uldivmod>
 800398c:	4602      	mov	r2, r0
 800398e:	460b      	mov	r3, r1
 8003990:	4613      	mov	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800399a:	d308      	bcc.n	80039ae <UART_SetConfig+0x3de>
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039a2:	d204      	bcs.n	80039ae <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	60da      	str	r2, [r3, #12]
 80039ac:	e0b6      	b.n	8003b1c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80039b4:	e0b2      	b.n	8003b1c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039be:	d15e      	bne.n	8003a7e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80039c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d828      	bhi.n	8003a1a <UART_SetConfig+0x44a>
 80039c8:	a201      	add	r2, pc, #4	; (adr r2, 80039d0 <UART_SetConfig+0x400>)
 80039ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ce:	bf00      	nop
 80039d0:	080039f5 	.word	0x080039f5
 80039d4:	080039fd 	.word	0x080039fd
 80039d8:	08003a05 	.word	0x08003a05
 80039dc:	08003a1b 	.word	0x08003a1b
 80039e0:	08003a0b 	.word	0x08003a0b
 80039e4:	08003a1b 	.word	0x08003a1b
 80039e8:	08003a1b 	.word	0x08003a1b
 80039ec:	08003a1b 	.word	0x08003a1b
 80039f0:	08003a13 	.word	0x08003a13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039f4:	f7fe fce0 	bl	80023b8 <HAL_RCC_GetPCLK1Freq>
 80039f8:	61f8      	str	r0, [r7, #28]
        break;
 80039fa:	e014      	b.n	8003a26 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039fc:	f7fe fcf2 	bl	80023e4 <HAL_RCC_GetPCLK2Freq>
 8003a00:	61f8      	str	r0, [r7, #28]
        break;
 8003a02:	e010      	b.n	8003a26 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a04:	4b4d      	ldr	r3, [pc, #308]	; (8003b3c <UART_SetConfig+0x56c>)
 8003a06:	61fb      	str	r3, [r7, #28]
        break;
 8003a08:	e00d      	b.n	8003a26 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a0a:	f7fe fc3d 	bl	8002288 <HAL_RCC_GetSysClockFreq>
 8003a0e:	61f8      	str	r0, [r7, #28]
        break;
 8003a10:	e009      	b.n	8003a26 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a16:	61fb      	str	r3, [r7, #28]
        break;
 8003a18:	e005      	b.n	8003a26 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d077      	beq.n	8003b1c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	005a      	lsls	r2, r3, #1
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	085b      	lsrs	r3, r3, #1
 8003a36:	441a      	add	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a40:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	2b0f      	cmp	r3, #15
 8003a46:	d916      	bls.n	8003a76 <UART_SetConfig+0x4a6>
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a4e:	d212      	bcs.n	8003a76 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	f023 030f 	bic.w	r3, r3, #15
 8003a58:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	085b      	lsrs	r3, r3, #1
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	f003 0307 	and.w	r3, r3, #7
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	8afb      	ldrh	r3, [r7, #22]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	8afa      	ldrh	r2, [r7, #22]
 8003a72:	60da      	str	r2, [r3, #12]
 8003a74:	e052      	b.n	8003b1c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a7c:	e04e      	b.n	8003b1c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a82:	2b08      	cmp	r3, #8
 8003a84:	d827      	bhi.n	8003ad6 <UART_SetConfig+0x506>
 8003a86:	a201      	add	r2, pc, #4	; (adr r2, 8003a8c <UART_SetConfig+0x4bc>)
 8003a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8c:	08003ab1 	.word	0x08003ab1
 8003a90:	08003ab9 	.word	0x08003ab9
 8003a94:	08003ac1 	.word	0x08003ac1
 8003a98:	08003ad7 	.word	0x08003ad7
 8003a9c:	08003ac7 	.word	0x08003ac7
 8003aa0:	08003ad7 	.word	0x08003ad7
 8003aa4:	08003ad7 	.word	0x08003ad7
 8003aa8:	08003ad7 	.word	0x08003ad7
 8003aac:	08003acf 	.word	0x08003acf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ab0:	f7fe fc82 	bl	80023b8 <HAL_RCC_GetPCLK1Freq>
 8003ab4:	61f8      	str	r0, [r7, #28]
        break;
 8003ab6:	e014      	b.n	8003ae2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ab8:	f7fe fc94 	bl	80023e4 <HAL_RCC_GetPCLK2Freq>
 8003abc:	61f8      	str	r0, [r7, #28]
        break;
 8003abe:	e010      	b.n	8003ae2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ac0:	4b1e      	ldr	r3, [pc, #120]	; (8003b3c <UART_SetConfig+0x56c>)
 8003ac2:	61fb      	str	r3, [r7, #28]
        break;
 8003ac4:	e00d      	b.n	8003ae2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ac6:	f7fe fbdf 	bl	8002288 <HAL_RCC_GetSysClockFreq>
 8003aca:	61f8      	str	r0, [r7, #28]
        break;
 8003acc:	e009      	b.n	8003ae2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ace:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ad2:	61fb      	str	r3, [r7, #28]
        break;
 8003ad4:	e005      	b.n	8003ae2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003ae0:	bf00      	nop
    }

    if (pclk != 0U)
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d019      	beq.n	8003b1c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	085a      	lsrs	r2, r3, #1
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	441a      	add	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	2b0f      	cmp	r3, #15
 8003b00:	d909      	bls.n	8003b16 <UART_SetConfig+0x546>
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b08:	d205      	bcs.n	8003b16 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	60da      	str	r2, [r3, #12]
 8003b14:	e002      	b.n	8003b1c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b28:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3728      	adds	r7, #40	; 0x28
 8003b30:	46bd      	mov	sp, r7
 8003b32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b36:	bf00      	nop
 8003b38:	40008000 	.word	0x40008000
 8003b3c:	00f42400 	.word	0x00f42400

08003b40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00a      	beq.n	8003b6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00a      	beq.n	8003b8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00a      	beq.n	8003bae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	f003 0308 	and.w	r3, r3, #8
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00a      	beq.n	8003bd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	f003 0310 	and.w	r3, r3, #16
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00a      	beq.n	8003bf2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	f003 0320 	and.w	r3, r3, #32
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00a      	beq.n	8003c14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d01a      	beq.n	8003c56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c3e:	d10a      	bne.n	8003c56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00a      	beq.n	8003c78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	605a      	str	r2, [r3, #4]
  }
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af02      	add	r7, sp, #8
 8003c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c94:	f7fd fae0 	bl	8001258 <HAL_GetTick>
 8003c98:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0308 	and.w	r3, r3, #8
 8003ca4:	2b08      	cmp	r3, #8
 8003ca6:	d10e      	bne.n	8003cc6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ca8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f82d 	bl	8003d16 <UART_WaitOnFlagUntilTimeout>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e023      	b.n	8003d0e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0304 	and.w	r3, r3, #4
 8003cd0:	2b04      	cmp	r3, #4
 8003cd2:	d10e      	bne.n	8003cf2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f817 	bl	8003d16 <UART_WaitOnFlagUntilTimeout>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e00d      	b.n	8003d0e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b09c      	sub	sp, #112	; 0x70
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	60f8      	str	r0, [r7, #12]
 8003d1e:	60b9      	str	r1, [r7, #8]
 8003d20:	603b      	str	r3, [r7, #0]
 8003d22:	4613      	mov	r3, r2
 8003d24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d26:	e0a5      	b.n	8003e74 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2e:	f000 80a1 	beq.w	8003e74 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d32:	f7fd fa91 	bl	8001258 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d302      	bcc.n	8003d48 <UART_WaitOnFlagUntilTimeout+0x32>
 8003d42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d13e      	bne.n	8003dc6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d50:	e853 3f00 	ldrex	r3, [r3]
 8003d54:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003d56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d5c:	667b      	str	r3, [r7, #100]	; 0x64
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	461a      	mov	r2, r3
 8003d64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d68:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d6e:	e841 2300 	strex	r3, r2, [r1]
 8003d72:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003d74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1e6      	bne.n	8003d48 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	3308      	adds	r3, #8
 8003d80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d84:	e853 3f00 	ldrex	r3, [r3]
 8003d88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8c:	f023 0301 	bic.w	r3, r3, #1
 8003d90:	663b      	str	r3, [r7, #96]	; 0x60
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	3308      	adds	r3, #8
 8003d98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d9a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003da0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003da2:	e841 2300 	strex	r3, r2, [r1]
 8003da6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003da8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1e5      	bne.n	8003d7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2220      	movs	r2, #32
 8003db2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2220      	movs	r2, #32
 8003db8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e067      	b.n	8003e96 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d04f      	beq.n	8003e74 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003de2:	d147      	bne.n	8003e74 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dec:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df6:	e853 3f00 	ldrex	r3, [r3]
 8003dfa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	461a      	mov	r2, r3
 8003e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e0e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e14:	e841 2300 	strex	r3, r2, [r1]
 8003e18:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1e6      	bne.n	8003dee <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	3308      	adds	r3, #8
 8003e26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	e853 3f00 	ldrex	r3, [r3]
 8003e2e:	613b      	str	r3, [r7, #16]
   return(result);
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	f023 0301 	bic.w	r3, r3, #1
 8003e36:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	3308      	adds	r3, #8
 8003e3e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e40:	623a      	str	r2, [r7, #32]
 8003e42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e44:	69f9      	ldr	r1, [r7, #28]
 8003e46:	6a3a      	ldr	r2, [r7, #32]
 8003e48:	e841 2300 	strex	r3, r2, [r1]
 8003e4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1e5      	bne.n	8003e20 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2220      	movs	r2, #32
 8003e58:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2220      	movs	r2, #32
 8003e64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e010      	b.n	8003e96 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	69da      	ldr	r2, [r3, #28]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	bf0c      	ite	eq
 8003e84:	2301      	moveq	r3, #1
 8003e86:	2300      	movne	r3, #0
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	79fb      	ldrb	r3, [r7, #7]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	f43f af4a 	beq.w	8003d28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3770      	adds	r7, #112	; 0x70
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
	...

08003ea0 <__libc_init_array>:
 8003ea0:	b570      	push	{r4, r5, r6, lr}
 8003ea2:	4d0d      	ldr	r5, [pc, #52]	; (8003ed8 <__libc_init_array+0x38>)
 8003ea4:	4c0d      	ldr	r4, [pc, #52]	; (8003edc <__libc_init_array+0x3c>)
 8003ea6:	1b64      	subs	r4, r4, r5
 8003ea8:	10a4      	asrs	r4, r4, #2
 8003eaa:	2600      	movs	r6, #0
 8003eac:	42a6      	cmp	r6, r4
 8003eae:	d109      	bne.n	8003ec4 <__libc_init_array+0x24>
 8003eb0:	4d0b      	ldr	r5, [pc, #44]	; (8003ee0 <__libc_init_array+0x40>)
 8003eb2:	4c0c      	ldr	r4, [pc, #48]	; (8003ee4 <__libc_init_array+0x44>)
 8003eb4:	f000 f820 	bl	8003ef8 <_init>
 8003eb8:	1b64      	subs	r4, r4, r5
 8003eba:	10a4      	asrs	r4, r4, #2
 8003ebc:	2600      	movs	r6, #0
 8003ebe:	42a6      	cmp	r6, r4
 8003ec0:	d105      	bne.n	8003ece <__libc_init_array+0x2e>
 8003ec2:	bd70      	pop	{r4, r5, r6, pc}
 8003ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ec8:	4798      	blx	r3
 8003eca:	3601      	adds	r6, #1
 8003ecc:	e7ee      	b.n	8003eac <__libc_init_array+0xc>
 8003ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ed2:	4798      	blx	r3
 8003ed4:	3601      	adds	r6, #1
 8003ed6:	e7f2      	b.n	8003ebe <__libc_init_array+0x1e>
 8003ed8:	08003f60 	.word	0x08003f60
 8003edc:	08003f60 	.word	0x08003f60
 8003ee0:	08003f60 	.word	0x08003f60
 8003ee4:	08003f64 	.word	0x08003f64

08003ee8 <memset>:
 8003ee8:	4402      	add	r2, r0
 8003eea:	4603      	mov	r3, r0
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d100      	bne.n	8003ef2 <memset+0xa>
 8003ef0:	4770      	bx	lr
 8003ef2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ef6:	e7f9      	b.n	8003eec <memset+0x4>

08003ef8 <_init>:
 8003ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003efa:	bf00      	nop
 8003efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003efe:	bc08      	pop	{r3}
 8003f00:	469e      	mov	lr, r3
 8003f02:	4770      	bx	lr

08003f04 <_fini>:
 8003f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f06:	bf00      	nop
 8003f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f0a:	bc08      	pop	{r3}
 8003f0c:	469e      	mov	lr, r3
 8003f0e:	4770      	bx	lr
